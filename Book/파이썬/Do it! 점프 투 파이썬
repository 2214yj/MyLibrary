출처: 박응용(2019), "Do it! 점프 투 파이썬", 이지스퍼블리싱
해당 책을 학습하고 개인 학습용으로 정리한 내용입니다.

* 파이썬 문법 리마인딩을 위한 복습!! *
* <나혼자 파이썬>책과 안겹치는 내용 위주로 *

* format 함수를 사용한 포매팅
인덱스 방법과 이름 지정 방법을 혼용해서 사용 가능
ex) print("I ate {0} apples. so I was sick for {days} days.".format(10, day=3))

왼쪽 정렬(:<), 오른쪽 정렬(:>), 가운데 정렬(:^), 공백 대신 문자로 채우기(:문자<)(:문자>)(:문자^) 옵션 설정 가능
ex) print("{0:>10}".format("hi"))   =>  '        hi'
ex) print("{0:=^10}".format("hi"))  =>  '====hi===='

소수점 표현하기
ex) print("{0:10.4f}".format(y))    =>  '    3.4213'

* 문자열 포매팅(파이썬 3.6버전부터 가능)
문자열 앞에 f 접두사를 붙이면 f 문자열 포매팅 기능 사용 가능.
f포매팅은 위에서 생성한 변수를 참조할 수 있음. 또한 표현식을 지원.
ex) f'나는 내년이면 {age+1}살이 된다.'
ex) f'{"hi":>10}    =>  '        hi'

* 문자열 바꾸기
문자열.replace(문자열1,문자열2)  =>  문자열 안의 문자열1을 문자열2로 치환

* 문자열 나누기
문자열.split(구분자)  =>  구분자를 지정하지 않으면 공백을 기준으로 문자열 나눔

* 딕셔너리 만들 때 주의사항
딕셔너리의 key는 고유한 값이므로 중복되는 key 값을 설정해 놓으면 하나를 제외한 나머지 것들이 모두 무시됨
또한 key로 리스트는 쓸 수 없지만 튜플은 가능하다. 리스트는 그 값이 변할 수 있기 떄문에 key로 쓸 수 없다.

* 딕셔너리 관련 함수
딕셔너리 이름.items() : key와 value의 쌍을 튜플로 묶은 값을 객체로 돌려줌.
딕셔너리 이름.clear() : 딕셔너리 안의 모든 요소를 삭제. {} 상태가 됨.
딕셔너리 이름.get(값, 디폴트값) : 디폴트 값을 설정하면 key 값이 없을 경우 미리 정해 둔 디폴트 값을 대신 가져옴.

* 집합 자료형
집합 자료형은 set() 함수를 통해 만들 수 있음. {} 괄호 사용.
집합 자료형은 중복을 허용하지 않으며 순서가 없음. => 중복을 제거하기 위한 필터 역할로 종종 사용됨!
집합이름.add(값) : 값 1개 추가
집합이름.update(값 여러개 추가하기) : 값 여러개 추가
집합이름.remove(특정값) : 특정값 제거

* 변수를 만드는 여러 가지 방법
a,b = ('python', 'life')
(a,b) = 'python', 'life'    //튜플은 괄호를 생략 가능
[a,b] = ['python', 'life']
a = b = 'python'

=> 위 방법을 사용해서 두 변수의 값을 간단히 바꾸기 가능
ex) a, b = b, a

* print( ,end=" ")  //매개변수 end를 넣어 주면 한 줄의 끝을 end값으로 지정함.

** 리스트 내포 사용하기
[표현식 for 항목 in 반복 가능 객체 if 조건]
for문을 중첩해서도 사용 가능 (문법은 책 참고)
ex) result = [num * 3 for num in a]     //리스트 요소들을 세제곱하는 코드
ex) result - [num * 3 for num in a if num % 2 == 0] //리스트 요소들 중 짝수인 것들만 세제곱하는 코드

* 함수의 입력값 개수가 정해지지 않은 경우
def 함수 이름(*매개변수)    //매개변수 앞에 *을 붙여줌.

* 함수 매개변수에 초기값 미리 설정 가능!
초기값을 설정하는 매개변수는 매개변수들 중 맨 끝에 위치 해야 오류가 발생하지 않음!

* 함수를 한 줄로 간결하게 만들어주는 lamda
lamda 매개변수1, 매개변수2,... : 매개변수를 사용한 표현식
ex) add = lamda a, b: a+b

* 문자열 띄어쓰기는 콤마로 가능
ex) print("life", "is", "too short")    =>  life is too short

* 메서드의 또 다른 호출 방법
'객체.메서드' 형태로 호출할 때는 self를 반드시 생략해서 호출해야 함. ex) a.setdata(4,2)
반면에, '클래스 이름.메서드' 형태로 호출할 때는 첫 번째 매개변수 self에 객체를 꼭 전달해줘야 함. ex) FourCal.setdata(a, 4, 2)

* 클래스의 생성자
파이썬에서 메서드 이름으로 __init__를 사용하면 이 메서드는 생성자가 됨.

* 클래스 변수와 객체 변수
클래스 내부에 선언된 변수를 클래스 변수라고 하며, self.name과 같이 self가 붙어 있는 변수를 객체 변수라고 함.
클래스 변수는 클래스의 네임스페이스에 위치하며, self.name과 같은 인스턴스 변수는 인스턴스의 네임스페이스에 위치하게 됨.

* if __name__=="__main__"의 의미
직접 파일을 실행했을 때에는 true가 되어 if 다음 문장이 수행됨. 반대로 대화형 인터프리터나 다른 파일에서 이 모듈을 불러서 사용할 경우, False가 되어 if문이 수행되지 않음.

* __name__ 변수는 파이썬이 내부적으로 사용하는 특별한 변수 이름.
직접 파일을 실행한 경우에는 파일 내부에서 __name__변수에 __main__ 값이 저장됨. 하지만 파이썬 셸이나 다른 파이썬 모듈에서 파일을 import 할 경우에는 파일의 __name__ 변수에는 모듈 이름 값이 저장됨.

* 예외처리
try:
    ...
except [발생 오류[as 오류 메시지 변수]]:
    ...

[] 기호 안의 내용은 생략 가능. try 블록 수행 중 오류가 발생하면 except 블록이 수행됨.
발생 오류를 지정하면 해당 오류가 발생할 때만 except 블록을 수행. as 오류 메시지 변수까지 지정하면 오류 메시지의 내용을 알 수 있음.
ex) try:
        4 / 0
    except ZeroDivisionError as e:
        print(e)



try:
    ...
finally:
    ...

finally절은 try문 수행 도중 예외 발생 여부에 상관없이 항상 수행됨. 보통 finally절은 사용한 리소스를 close해야 할 때에 많이 사용.

* 예외 만들기
특수한 예외 처리를 하기 위해 직접 예외를 만들어서 사용 가능. Exception 클래스를 상속하는 예외 클래스를 만들어서 사용하면 됨.

** 주요 내장 함수(외부 모듈라 달리 import 없이 곧바로 사용 가능)

















6장 문자열 조작

문자열 조작이란 문자열을 변경하거나 분리하는 등의 여러 과정을 말한다.

문제1. 유효한 팰린드롬
주어진 문자열이 팰린드롬(앞뒤가 똑같은 단어나 문장으로, 뒤집어도 같은 말이 되는 단어 또는 문장)인지 확인하라. 대소문자를 구분하지 않으며, 영문자와 숫자만을 대상으로 한다.

예제1)
입력: "A man, a plan, a canal: Panama"
출력: "true"

풀이1) 리스트로 변환
def isPalindrome(self, s: str) -> bool:
    strs = []
    for char in s:
        if char.isalnum():
            strs.append(char.lower())

    while len(strs) > 1:
        if strs.pop(0) != strs.pop():
            return False
    return True
=> 문자열의 문자들을 isalnum()을 이용해 영문자와 숫자인 문자만 판별하여 새로운 리스트를 만들었다.
pop() 함수를 통해 리스트의 맨 앞과 맨 뒤의 값을 매칭해 나가면서 결과를 도출한다.

풀이2) 데크 자료형을 이용한 최적화 (Deque를 명시적으로 선언하면 속도를 개선할 수 있다)
def isPalindrome(self, s: str) -> bool:
    strs: Deque = collections.deque()

    for char in s:
        if char.isalnum():
            strs.append(char.lower())

    while len(strs) > 1:
        if sttrs.popleft() != strs.pop():
            return False

    return True
=> 자료형을 Deque로 변경하는 것만으로도 성능이 5배 가까이 개선되었다.
리스트의 pop(0)은 O(n)인 데 반해, Deque의 popleft()는 O(1)이기 때문이며, 각각 n번씩 반복하면 리스트 구현은 O(n²), 데크 구현은 O(n)으로 성능 차이가 크다.

풀이 3) 슬라이싱 사용
def isPalindrome(self, s: str) -> bool:
    s = s.lower()
    s = re.sub('[^a-z0-9]'. '', s)

    return s = s[::-1]
=> 여기서는 별달리 알고리즘이라 부를 만한 게 없다. 정규식으로 불필요한 문자를 필터링하고, 문자열을 조작할 수 있는 파이썬의 슬라이싱(Slicing)을 사용했다.
앞서 풀이에서는 isalnum()으로 모든 문자를 일일이 점검했지만 여기서는 문자열 전체를 한 번에 영숫자만 걸러내도록 정규식으로 처리했다.
또한 파이썬은 문자열을 배열이나 리스트처럼 자유롭게 슬라이싱할 수 있는 좋은 기능을 제공하며, [::-1]을 이용하면 뒤집을 수 있다. (코드가 훨씬 더 줆어듦은 물론, 내부적으로 C로 빠르게 구현되어 있어 훨씬 더 좋은 속도를 기대할 수 있다.)
이 경우, 앞선 풀이2에 비해 약 2배 정도 속도가 개선되었다.

** 문자열 슬라이싱
파이썬에서는 문자열 슬라이싱이라는 매우 빠르고 편리한 기능을 제공한다.
위치를 지정하면 해당 위치의 배열 포인터를 얻게 되며 이를 통해 연결된 객체를 찾아 실제 값을 찾아내는데, 이 과정은 매우 빠르게 진행되므로 문자열을 조작할 때는 항상 슬라이싱을 우선으로 사용하는 편이 속도 개선에 유리하다.


문제2.






<추가 복습 포인트!>
isalpha(): 문자열이 영어 혹은 한글로 되어있으면 참 리턴, 아니면 거짓 리턴.
isalnum(): 문자열이 영어, 한글 혹은 숫자로 되어있으면 참 리턴, 아니면 거짓 리턴.

isdecimal(), isdigit(), isnumeric()의 차이:
3²에서 ²는 특수문자이지만 isdigit() 함수와 isnumeric() 함수로는 True가 반환된다.
하지만 isdecimal() 함수로는 False가 반환된다.

isdigit() 함수는 단일 글자가 '숫자' 모양으로 생겼으면 무조건 True를 반환하는 함수. 즉, 숫자처럼 생긴 '모든 글자'를 숫자로 친다.
그에 비해 isdecimal() 함수는 주어진 문자열이 int형으로 변환이 가능한지 알아내는 함수이기 때문에 특수문자 중 숫자모양을 숫자로 치지않는다.
isnumeric() 함수는 숫자값 표현에 해당하는 문자열까지 인정한다. 제곱근 및 분수, 거듭제곱 특수문자도 isnumeric() 함수는 True를 반환하는 것을 알 수 있다.
즉, isdigit() > isnumeric() > isdecimal() 순서대로 유연하게 숫자로 인식함.
출처: https://it-neicebee.tistory.com/43?category=890500 [IT's Portfolio:티스토리]
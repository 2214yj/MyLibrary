1장 코딩 인터뷰
코딩인터뷰가 무엇인지, 코딩 테스트 플랫폼에는 어떤 특징이 있는지, 국내 기업들은 어떤 코딩 테스트 플랫폼을 활용하는지 알아보자.
또한 온라인 코딩 테스트를 치르기 전에 준비해야 할 것들을 살펴보고, 화이트보드 코딩 인터뷰는 어떤 식으로 진행하는지 알아봄.

코딩 인터뷰: 기술 직군 채용을 위한 문제 중심의 개발 인터뷰.
코딩 인터뷰와 코딩 테스트는 온라인/오프라인 여부와 면접관 참석 여부, 도구의 여부에 따라 온사이트(오프라인) 코딩 인터뷰,화이트보드 코딩 인터뷰, 온라인 코딩 인터뷰, 온라인 코딩 테스트로 나눌 수 있음.

국내 회사에서 주로 사용하는 코딩 테스트 플랫폼으로는 해커랭크, 코딜리티, 리노트인터뷰, 프로그래머스가 있음.
카카오 -> 해커랭크 , 네이버 -> 코딜리티 , 네이버 웹툰 -> 해커랭크 , 라인 -> 프러그래머스 , 야놀자 -> 코딜리티 , 삼성전자 -> 자체 플랫폼

팁, 코딩 테스트 시 자주 쓰이는 동작들에 대해서는 코드 스니펫을 미리 만들어두면 도움이 된다.

* 타임 아웃이 발생하는 경우
테스트 케이스 중에는 일부러 입력값에 수천, 수만 개를 입력해 두고 타임아웃을 유발하는 경우도 있다.
시간 복잡도가 O(n^2)인 알고리즘은 타임아웃이 발생하고 O(n) 또는 적어도 O(nlogn) 정도는 되어야 풀리는 상황을 만들어내기 위해서이다.
파이썬은 C++, 자바에 비해 실행 속도가 느리기 때문에, 다른 언어에 비해 알고리즘 최적화에 좀 더 많은 고민이 필요하다.

* 예외 처리를 잊지 말자
입력값이 0이거나 null이 들어오는 경우가 있는데, 입력값에 대한 검증 과정이 없다면 에러가 발생한다.
예외 처리를 하지 않아서 일부 테스트 케이스가 실패하면 감점으로 처리되므로 유의해야 한다.

* 잘못 접근한 풀이, 어떻게 대처할까?
이로 인해 다른 문제를 풀 시간이 부족해지므로 문제당 제한 시간을 정해두고 그 시간을 초과하는 경우 바로바로 다음 문제로 넘어가는 것이 좋다.

* 풀이 시간을 초과했을 때, 포기해야 할까
끝까지 시도해보는 것이 오히려 좋은 피드백을 받을 수 있는 계기가 될 수 있다.
만약 면접관의 이메일 주소를 알고 있다면 시간이 초과되었더라도 제출을 해보자.

* REPL 도구로 코드를 검증하자
REPL은 사용자가 입력한 프로그램을 읽고(read) 값을 계산(evaluate)한 다음 출력(print)하는 일을 반복(loop)하는 구조를 뜻하는 read-eval-print loop의 약어로서
사용자 입력에 대한 실행 결과를 바로 되돌려 주는 상호작용 환경을 말한다.

* 화이트보드 코딩 인터뷰
많은 사람 앞에서 문제를 잘 풀이하고 잘 얘기할 수 있는 능력을 꾸준히 키워나가는 게 중요하다.
화이트보드 인터뷰는 검색이나 인터넷의 도움을 전혀 받을 수 없기 때문에 모르는 알고리즘을 찾아내서 설명하기는 사실상 매우 어렵다.
모른다고 계속 붙잡고 있기 보다는 면접관에게 끊임없이 질문을 던져서 힌트를 받아내야 한다.
아마존, 페이스북의 경우 '어떤 질문을 하느냐'가 주요 평가 항목이 되기도 하고 '문제해결-코딩-검증-커뮤니케이션'이 평가 기준이 된다.
화이트보드의 특성상 최적화에 집착하기보다는 일단 뭐라도 문제를 풀어낼 수 있는지, 그 알고리즘을 깔끔한 코드로 옮겨 적을 수 있는지, 그걸 검증할 수 있는지, 제대로 설명할 수 있는지 등이 중요하다.
특히, 핵심을 관통하는 알고리즘이 중요하다.











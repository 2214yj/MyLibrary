1장 재귀 함수

** 재귀 함수
- 재귀 함수: 호출된 함수가 자기 자신을 다시 호출하는 것.
- 기저 사례(base case): 재귀 함수가 더 이상 호출되지 않도록 하는 '특정 조건'
재귀 함수를 구현하려면 1) 언제 어떤 매개변수를 가지고 호출할지를 정해야 하고, 2) 호출을 정지시켜 줄 기저 사례가 필요합니다.

* 스택 프레임으로 재귀 함수 이해하기
함수가 호출되면 메모리에서는 스택 프레임이라는 공간이 생긴다. 이 스택 프레임에는 함수 실행에 필요한 지역 변수들이 할당된다.
스택 프레임의 생성 시기는 함수를 호출했을 때고, 소멸 시기는 함수 실행이 종료되었을 때이다.
스택 프레임은 메모리에 생성되는데 생성될 수 있는 크기에 한계가 있다. 최대 한계치에 도달하게 되면 Recursion Depth 에러가 발생한다. (파이썬에서는 RecursionError라고 명명했지만 함수가 어떤 함수를 계속 호출하여 스택 프레임으로 쓰일 메모리 공간이 모자라게 되는 에러를 스택 오버플로라고 함.)
재귀 함수는 스택 프레임 관점에서 바라보면 상태 정보를 가지고 있는 지역 변수는 서로 다른 스택 프레임에 저장된다.
그렇기에 함수 내에서 자기 자신을 호출한다고 해도 같은 기능의 코드를 실행하는 것일 뿐 그 실행 결과는 서로 다른 스택 프레임에 있는 지역 변수에 저장된다.

ex) 재귀 함수 예제 코드
def factorial(n):
    if n <=0:
        return 1
    return n*factorial(n-1)

if __name__ == "__main__":
    for i in range(1,6):
        print(factorial(i)


* 재귀 트리 사용하기
문제를 여러 개의 부분 문제로 쪼갠 후 답을 찾는다. 이때 재귀 함수의 호출 형태가 트리 형태를 갖게 된다.

ex) 순열을 재귀 함수로 구현하기: 재귀 트리 사용하기 예제 코드
def permutation(arr, start):
    if len(arr)-1 == start:
        print(arr)
        return
    for idx in range(start, len(arr)):
        arr[start], arr[idx] = arr[idx], arr[start]
        permutation(arr, start+1)
        arr[start], arr[idx] = arr[idx], arr[start]

if __name__ == "__main__":
    arr = [1,2,3]
    permutation(arr, 0)



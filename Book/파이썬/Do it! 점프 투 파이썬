출처: 박응용(2019), "Do it! 점프 투 파이썬", 이지스퍼블리싱
해당 책을 학습하고 개인 학습용으로 정리한 내용입니다.

* 파이썬 문법 리마인딩을 위한 복습!! *
* <나혼자 파이썬>책과 안겹치는 내용 위주로 *

* format 함수를 사용한 포매팅
인덱스 방법과 이름 지정 방법을 혼용해서 사용 가능
ex) print("I ate {0} apples. so I was sick for {days} days.".format(10, day=3))

왼쪽 정렬(:<), 오른쪽 정렬(:>), 가운데 정렬(:^), 공백 대신 문자로 채우기(:문자<)(:문자>)(:문자^) 옵션 설정 가능
ex) print("{0:>10}".format("hi"))   =>  '        hi'
ex) print("{0:=^10}".format("hi"))  =>  '====hi===='

소수점 표현하기
ex) print("{0:10.4f}".format(y))    =>  '    3.4213'

* 문자열 포매팅(파이썬 3.6버전부터 가능)
문자열 앞에 f 접두사를 붙이면 f 문자열 포매팅 기능 사용 가능.
f포매팅은 위에서 생성한 변수를 참조할 수 있음. 또한 표현식을 지원.
ex) f'나는 내년이면 {age+1}살이 된다.'
ex) f'{"hi":>10}    =>  '        hi'

* 문자열 바꾸기
문자열.replace(문자열1,문자열2)  =>  문자열 안의 문자열1을 문자열2로 치환

* 문자열 나누기
문자열.split(구분자)  =>  구분자를 지정하지 않으면 공백을 기준으로 문자열 나눔

* 딕셔너리 만들 때 주의사항
딕셔너리의 key는 고유한 값이므로 중복되는 key 값을 설정해 놓으면 하나를 제외한 나머지 것들이 모두 무시됨
또한 key로 리스트는 쓸 수 없지만 튜플은 가능하다. 리스트는 그 값이 변할 수 있기 떄문에 key로 쓸 수 없다.

* 딕셔너리 관련 함수
딕셔너리 이름.items() : key와 value의 쌍을 튜플로 묶은 값을 객체로 돌려줌.
딕셔너리 이름.clear() : 딕셔너리 안의 모든 요소를 삭제. {} 상태가 됨.
딕셔너리 이름.get(값, 디폴트값) : 디폴트 값을 설정하면 key 값이 없을 경우 미리 정해 둔 디폴트 값을 대신 가져옴.

* 집합 자료형
집합 자료형은 set() 함수를 통해 만들 수 있음. {} 괄호 사용.
집합 자료형은 중복을 허용하지 않으며 순서가 없음. => 중복을 제거하기 위한 필터 역할로 종종 사용됨!
집합이름.add(값) : 값 1개 추가
집합이름.update(값 여러개 추가하기) : 값 여러개 추가
집합이름.remove(특정값) : 특정값 제거
집합1 | 집합2 : 합집합
집합1 & 집합2 : 교집합
집합1 - 집합2 : 차집합

* 변수를 만드는 여러 가지 방법
a,b = ('python', 'life')
(a,b) = 'python', 'life'    //튜플은 괄호를 생략 가능
[a,b] = ['python', 'life']
a = b = 'python'

=> 위 방법을 사용해서 두 변수의 값을 간단히 바꾸기 가능
ex) a, b = b, a

* print( ,end=" ")  //매개변수 end를 넣어 주면 한 줄의 끝을 end값으로 지정함.

** 리스트 내포 사용하기
[표현식 for 항목 in 반복 가능 객체 if 조건]
for문을 중첩해서도 사용 가능 (문법은 책 참고)
ex) result = [num * 3 for num in a]     //리스트 요소들을 세제곱하는 코드
ex) result = [num * 3 for num in a if num % 2 == 0] //리스트 요소들 중 짝수인 것들만 세제곱하는 코드

* 함수의 입력값 개수가 정해지지 않은 경우
def 함수 이름(*매개변수)    //매개변수 앞에 *을 붙여줌.

* 함수 매개변수에 초기값 미리 설정 가능!
초기값을 설정하는 매개변수는 매개변수들 중 맨 끝에 위치 해야 오류가 발생하지 않음!

* 함수를 한 줄로 간결하게 만들어주는 lambda
lamda 매개변수1, 매개변수2,... : 매개변수를 사용한 표현식
ex) add = lamda a, b: a+b

* 문자열 띄어쓰기는 콤마로 가능
ex) print("life", "is", "too short")    =>  life is too short

* 메서드의 또 다른 호출 방법
'객체.메서드' 형태로 호출할 때는 self를 반드시 생략해서 호출해야 함. ex) a.setdata(4,2)
반면에, '클래스 이름.메서드' 형태로 호출할 때는 첫 번째 매개변수 self에 객체를 꼭 전달해줘야 함. ex) FourCal.setdata(a, 4, 2)

* 클래스의 생성자
파이썬에서 메서드 이름으로 __init__를 사용하면 이 메서드는 생성자가 됨.

* 클래스 변수와 객체 변수
클래스 내부에 선언된 변수를 클래스 변수라고 하며, self.name과 같이 self가 붙어 있는 변수를 객체 변수라고 함.
클래스 변수는 클래스의 네임스페이스에 위치하며, self.name과 같은 인스턴스 변수는 인스턴스의 네임스페이스에 위치하게 됨.

* if __name__=="__main__"의 의미
직접 파일을 실행했을 때에는 true가 되어 if 다음 문장이 수행됨. 반대로 대화형 인터프리터나 다른 파일에서 이 모듈을 불러서 사용할 경우, False가 되어 if문이 수행되지 않음.

* __name__ 변수는 파이썬이 내부적으로 사용하는 특별한 변수 이름.
직접 파일을 실행한 경우에는 파일 내부에서 __name__변수에 __main__ 값이 저장됨. 하지만 파이썬 셸이나 다른 파이썬 모듈에서 파일을 import 할 경우에는 파일의 __name__ 변수에는 모듈 이름 값이 저장됨.

* 예외처리
try:
    ...
except [발생 오류[as 오류 메시지 변수]]:
    ...

[] 기호 안의 내용은 생략 가능. try 블록 수행 중 오류가 발생하면 except 블록이 수행됨.
발생 오류를 지정하면 해당 오류가 발생할 때만 except 블록을 수행. as 오류 메시지 변수까지 지정하면 오류 메시지의 내용을 알 수 있음.
ex) try:
        4 / 0
    except ZeroDivisionError as e:
        print(e)


try:
    ...
finally:
    ...

finally절은 try문 수행 도중 예외 발생 여부에 상관없이 항상 수행됨. 보통 finally절은 사용한 리소스를 close해야 할 때에 많이 사용.

* 예외 만들기
특수한 예외 처리를 하기 위해 직접 예외를 만들어서 사용 가능. Exception 클래스를 상속하는 예외 클래스를 만들어서 사용하면 됨.

** 주요 내장 함수(외부 모듈라 달리 import 없이 곧바로 사용 가능), 알파벳 순
abs(숫자) : 숫자의 절댓값을 돌려주는 함수.
all(x) : 반복 가능한(iterable) 자료형 x를 인수로 받으며 이 x가 모두 탐이면 True, 거짓이 하나라도 있으면 False를 돌려줌. 반복 가능한(iterable) 자료형이란 for 문으로 그 값을 출력할 수 있는 것을 의미함.(리스트, 튜플, 문자열, 딕셔너리, 집합 등)
any(x) : 반복 가능한(iterable) 자료형 x를 인수로 받으며 이 x 중 하나라도 참이 있으면 True를 돌려주고, x가 모두 거짓일 때에만 False를 돌려줌.
chr(i) : 아스키 코드 값을 입력받아 그 코드에 해당하는 문자를 출력하는 함수.
dir(객체) : 객체가 자체적으로 가지고 있는 변수나 함수를 보여줌. ex) dir([1, 2, 3])  =>  리스트 객체 관련 메서드 보여줌.
divmod(a,b) : 2개의 숫자를 입력으로 받아서 a를 b로 나눈 몫과 나머지를 튜플 형태로 돌려주는 함수.
enumerate : enumerate는 '열거하다'라는 뜻으로 이 함수는 순서가 있는 자료형(리스트, 튜플, 문자열)을 입력으로 받아 인덱스 값을 포함하는 enumerate 객체를 돌려줌.
    ex) for i, name in enumerate(['body','foo','bar']): print(i,name)   =>  0 body ... 인덱스와 값이 차례로 출력됨
eval(expression) : 실행 가능한 문자열을 입력으로 받아 문자열을 실행한 결과값을 돌려주는 함수.
    ex) eval('divmod(4,3)') =>  (1,1)
filter(함수 이름, 반복 가능한 자료형) : filter란 무엇인가를 걸러낸다는 뜻으로 filter 함수도 동일한 의미를 가짐. 첫 번째 인수로 함수 이름을, 두 번째 인수로 그 함수에 차례로 들어갈 반복 가능한 자료형을 받음. 그리고 두 번째 인수인 반복 가능한 자료형 요소가 첫 번째 인수인 함수에 입력되었을 때 반환 값이 참인 것만 걸러 내서 돌려줌.
    ex) print(list(filter(positive, [1,-3,2,0,-5,6])))      =>  [1,2,6] //positive 함수는 각각 요소를 판별해서 양수값만 돌려주는 함수. list() 함수를 뺐더니 filter object id 값이 출력됨
    ex) print(list(filter(lambda x: x>0, [1,-3,2,0,-5,6])))             //lambda를 사용하면 더욱 간편하게 코드 작성 가능
hex(x) : 정수 값을 입력받아 16진수로 변환하여 돌려주는 함수.
id(object) : 객체를 입력받아 객체의 고유 주소 값(레퍼런스)을 돌려주는 함수.
int(x) : 문자열 형태의 숫자나 소수점이 있는 숫자 등을 정수 형태로 돌려주는 함수.
int(x,radix) : radix 진수로 표현된 문자열 x를 10진수로 변환하여 돌려줌. ex) int('1A', 16)   =>  26
isinstance(object, class) : 입력으로 받은 인스턴스가 그 클래스의 인스턴스인지를 판단하여 True, False를 리턴.
len(s) : 입력값 s의 길이(요소의 전체 개수)를 돌려주는 함수.
list(s) : 반복 가능한 자료형 s를 입력 받아 리스트로 만들어 돌려주는 함수.
map(함수 이름, 반복 가능한 자료형) : 입력 받은 자료형의 각 요소를 함수가 수행한 결과를 묶어서 돌려주는 함수.
    ex) list(map(two_times, [1,2,3,4]))     =>  [2,4,6,8]   //list를 빼면 map의 아이디가 나옴.
    ex) list(map(lambda a: a*2, [1,2,3,4])) =>  [2,4,6,8]   //lambda를 사용하면 더 간략하게 만들 수 있음.
max(반복 가능한 자료형) : 최댓값을 돌려주는 함수. 문자열도 가능!
min(반볻 가능한 자료형) : 최솟값을 돌려주는 함수. 문자열도 가능!
oct(x) : 정수 형태의 숫자를 8진수 문자열로 바꾸어 돌려주는 함수.
ord(c) : 문자의 아스키 코드 값을 돌려주는 함수.
pow(x,y) : x의 y 제곱한 결괏값을 돌려주는 함수.
range([start,] stop [,step]) : 입력받은 숫자에 해당하는 범위 값을 반복 가능한 객체로 만들어 돌려줌.
round(numbers[,ndigits]) : 숫자를 입력받아 반올림해 주는 함수.
sorted(반복 가능한 객체) : 입력값을 정렬한 후 그 결과를 리스트로 돌려주는 함수.
str(object) : 문자열 형태로 객체를 변환하여 돌려주는 함수.
sum(반복 가능한 객체) : 입력 받은 리스트나 튜플의 모든 요소의 합을 돌려주는 함수.
tuple(반복 가능한 객체) : 반복 가능한 자료형을 입력받아 튜플 형태로 바꾸어 돌려주는 함수.
type(object) : 입력값의 자료형이 무엇인지 알려주는 함수.
zip(*iterable) : 동일 개수로 이루어진 자료형을 묶어주는 역할을 하는 함수.
        ex) list(zip([1,2,3],[4,5,6],[7,8,9]))  =>  [(1,4,7), (2,5,8), (3,6,9)]

** 정규 표현식
정규 표현식은 복잡한 문자열을 처리할 때 사용하는 기법.

문자 클래스 [] : 문자 클래스로 만들어진 정규식은 '[] 사이의 문자들과 매치'를 의미. [] 안의 두 문자 사이에 하이픈(-)을 사용하면 두 문자 사이의 범위를 의미함. ex) [a-zA-Z]: 알파벳 모두를 의미. [0-9]: 숫자를 의미
    ex) [abc]   //'a,b,c 중 한 개의 문자와 매치'를 의미. "before"은 b가 있으므로 매치하지만 "dude"는 a,b,c 중 어느 하나도 포함하고 있지 않음로 매치되지 않음.
    문자 클래스([]) 안에는 어떤 문자나 메타 문자도 사용할 수 있지만 ^ 메타 문자를 주의해야 함! ^ 메타 문자를 사용할 경우에는 반대(not) 의미를 가짐.
    ex) [^0-9]  //숫자가 아닌 문자만 매치됨.

Dot(.) : 정규표현식의 Dot(.) 메타 문자는 줄바꿈 문자인 \n을 제외한 모든 문자와 매치됨을 의미함.
    ex) a.b     //a와 b 사이에 줄바꿈 문자를 제외한 어떤 문자가 들어가도 모두 매치. "a + 모든 문자 + b"
    a[.]b의 의미는 "a + Dot(.)문자 + b", 문자 클래스 [] 안에 Dot(.) 메타 문자가 사용된다면 이것은 '모든 문자'가 아닌 '문자 . 그대로'를 의미.

반복(*) : 반복을 의미하는 * 메타 문자. * 바로 앞에 있는 문자가 0~무한번 반복 될 수 있다는 의미.
    ex) ca*t    //"ct"는 a가 0번 반복되어 매치. "caaat"는 a가 3번 반복되어 매치.

반복(+) : +는 *와 달리, 반복횟수가 1번 부터!
    ex) ca+t    //"ct"는 a가 0번 반복되므로 매치되지 않음. "caaat"는 a가 3번 반복되어 매치.

반복({m,n},?) : {} 메타 문자를 사용하면 반복 횟수를 고정할 수 있음. {m,n} 정규식을 사용하면 반복횟수가 m부터 n까지 매치할 수 있음.
    또한 m 또는 n을 생략할 수 있음. {3,} => 반복 횟수가 3 이상인 경우. {,3} => 반복 횟수가 3 이하인 경우. 생략된 m은 0과 동일하고 생략된 n은 무한대를 의미.
    {m}은 {} 메타 문자 바로 앞의 문자가 m번 반복되면 매치.
    {m,n}은 {} 메타 문자 바로 앞의 문자가 m~n번 반복되면 매치.
    ?은 ? 바로 앞의 문자가 0~1번 사용되면 매치.


* print(r"문자열") =>  문자열 안에 \n,\s와 같은 이스케이프 코드가 있어도 문자 그대로 출력해줌.




















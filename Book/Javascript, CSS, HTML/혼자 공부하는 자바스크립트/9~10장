
9장 클래스
C를 제외한 대부분의 프로그래밍 언어는 객체 지향이라는 패러다임을 기반으로 만들어진 프로그래밍 언어.
객체 지향 패러다임이란 객체를 우선적으로 생각해서 프로그램을 만든다는 방법론. 객체 지향 프로그래밍 언어들은 클래스라는 문법으로 객체를 효율적이고 안전하게 만들어 객체 지향 패러다임을 쉽게 프로그래밍에 적용할 수 있도록 도와줌.

# 추상화
프로그램에 필요한 요소만 사용해서 객체를 표현하는 것. 좀 더 포괄적인 사전적 의미로는 복잡한 자료, 모듈, 시스템 등으로부터 핵심적인 개념과 기능을 간추려 내는 것.

# 객체를 처리하는 함수
객체를 만드는 부분과 객체를 활용하는 부분으로 나누어짐. 객체를 처리하는 함수를 사용하면 객체를 쉽게 유지보수할 수 있음.

# 클래스 선언하기
객체들을 정의하고 그러한 객체를 활용해서 프로그램을 만드는 것 = 객체 지향 프로그래밍
클래스와 프로토타입이라는 2가지 문법으로 객체를 효율적으로 만들 수 있음.
자바스크립트는 초기에 프로토타입 문법을 제공했음. 하지만 시대의 모든 흐름이 클래스 문법의 승리로 이어지자, 최신 자바스크립트는 클래스의 문법을 제공하기 시작함.

# 클래스 생성
class 클래스 이름 {

}

# 인스턴스 생성
new 클래스 이름()

# 생성자
객체가 생성될 때 호출되는 생성자(constructor)라는 이름의 함수.
class 클래스 이름 {
    constructor () {
    }
}

# 메소드
메소드 이름 (매개변수) {

}

# 상속
어떤 클래스가 가지고 있는 유산(속성과 메소드)을 다른 클래스에게 물려주는 형태로 사용함. 상속은 클래스 선언 코드를 중복해서 작성하지 않도록 함으로써 코드의 생산 효율을 올리는 문법.
class 클래스 이름 extends 부모 클래스 이름 {

}

# private 속성과 메소드
클래스 사용자가 클래스 속성 또는 메소드를 의도하지 않은 방향으로 사용하는 것을 막아 클래스의 안정성을 확보하기 위해 나온 문법이 private 속성과 메소드.
속성과 메소드 이름 앞에 #을 붙이기만 하면 됨. private 속성으로 변경하면 클래스 외부에서는 해당 속성에 접근할 수 없음.
class 클래스 이름 {
    #속성 이름
    #메소드 이름 () {

    }
}

# 게터와 세터
속성값을 확인하고 변경할 수 있는 메소드
get~()와 set~()의 형식을 가짐.

# get 키워드 set 키워드
코드를 더 쉽게 작성하고 사용할 수 있도록 get 키워드와 set 키워드 문법을 제공. 이를 사용하면 클래스를 활용할 때 단순하게 속성을 사용하는 형태처럼 게터와 세터를 사용 가능.
class 클래스 이름 {
    get 이름 () { return 값 }
    set 이름 (value) { }
}

ex)
클래스 내부에
get length () { return this.#length }
다음과 같은 메소드가 선언되어 있으면 클래스를 활용할 때
인스턴스 이름.length 와 같이 사용 가능.

# static 속성과 메소드
static 속성과 메소드는 인스턴스를 만들지 않고 사용할 수 있는 속성과 메소드. '클래스 이름.속성' 또는 '클래스 이름.메소드()'와 같이 사용 가능.
private 특성과 static 특성을 한꺼번에 적용 가능.

** 외부에 변수와 함수를 선언하는 대신 static을 사용하는 이유
=> 어떤 속성과 함수가 클래스 내부에 귀속되어 있다는 것을 명시적으로 나타낼 수 있음.
private 특성과 게터, 세터를 부여해서 조금 더 안전한 변수와 함수로 사용 가능.

# 오버라이드
오바리이드는 부모가 갖고 있는 함수를 자식에서 다시 선언해서 덮어쓰는 것. 부모에 있던 메소드 내용도 사용하고 싶을 경우, super.메소드() 형태의 코드를 사용하면 됨.







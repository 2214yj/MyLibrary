8장 연결 리스트

연결 리스트는 데이터 요소의 선형 집함으로, 데이터의 순서가 메모리에 물리적인 순서대로 저장되지는 않는다.
연결 리스트는 컴퓨터 과학에서 배열과 함께 가장 기본이 되는 대표적인 선형 자료구조 중 하나로 다양한 추상 자료형(Abstract Data Type) 구현의 기반이 된다.
동적으로 새로운 노드를 삽입하거나 삭제하기가 간편하며, 연결 구조를 통해 물리 메모리를 연속적으로 사용하지 않아도 되기 때문에 관리도 쉽다.
또한 데이터를 구조체로 묶어서 포인터로 연결한다는 개념은 여러가지 방법으로 다양하게 활용이 가능하다.
실제로 컴퓨터의 물리 메모리에는 구조체 각각이 서로 연결된 현태로 구성되어 있으며, 메모리 어딘가에 여기저기 흩뿌려진 형상을 띤다.
연결리스트는 배열과는 달리 특정 인덱스에 접근하기 위해서는 전체를 순서대로 읽어야 하므로 상수 시간에 접근할 수 없다.
즉 탐색에는 O(n)이 소요된다. 반면, 시작 또는 끝 지점에 아이템을 추가하거나 삭제, 추출하는 작업은 O(1)에 가능하다.

문제13. 팰린드롬 연결 리스트
연결 리스트가 팰린드롬 구조인지 판별하라

예제1)
입력: 1->2
출력: false

풀이1) 리스트 변환
 def isPalindrome(self, head: ListNode) -> bool:
        q: List = []

        if not head:
            return True

        node = head
        # 리스트 변환
        while node is not None:
            q.append(node.val)
            node = node.next

        # 팰린드롬 판별
        while len(q) > 1:
            if q.pop(0) != q.pop():
                return False

        return True
=> 팰린드롬 여부를 판별하기 위해서는 앞뒤로 모두 추출할 수 있는 자료구조가 필요하다.
일반적인 스택 자료구조는 마지막 요소만 추출하는 연산만 있지만, 파이썬의 리스트는 pop() 함수에 인덱스를 지정할 수 있어 마지막 요소만 추출하는 연산만 있지만,
파이썬의 리스트는 pop() 함수에 인덱스를 지정할 수 있어 마지막 요소가 아니더라도 얼마든지 원하는 위치를 자유롭게 추출할 수 있다.
따라서 이 문제는 연결 리스트를 파이썬의 리스트로 변환하여 리스트의 기능을 이용하면 쉽게 풀이할 수 있을 것 같다.

풀이2) 데크를 이용한 퇴적화
def isPalindrome(self, head: ListNode) -> bool:
        # 데크 자료형 선언
        q: Deque = collections.deque()

        if not head:
            return True

        node = head
        while node is not None:
            q.append(node.val)
            node = node.next

        while len(q) > 1:
            if q.popleft() != q.pop():
                return False

        return True
=> 앞서 풀이의 문제점은 q.pop(0)에서 첫 번째 아이템을 추출할 때의 속도 문제다.
동적 배열로 구성된 리스트는 맨 앞 아이템을 가져오기에 적합한 자료형이 아니다. 왜냐면 첫 번째 값을 꺼내오면 모든 값이 한 칸씩 시프팅되며, 시간 복잡도 O(n)이 발생하기 때문이다.
이 때문에 최적화를 위해서는 맨 앞에 데이터를 가져올 때 O(n) 이내에 처리할 수 있는 자료형이 필요하다. 파이썬의 데크는 이중 연결 리스트 구조로 양쪽 방향 모두를 추출하는 데 시간 복잡도 O(1)에 실행된다.

만약 리스트로 처리했을 때, 타임아웃이 발생하거나 오프라인 코딩 인터뷰에서 효율성 질문이 들어온다면, 양방향 모두 O(1)에 가능한 데크를 설명한 다음 이 자료형을 적용할 것이라는 점을 얘기해볼 수 있을 것이다.
무엇보다 파이썬에서 리스트를 데크로 수정하려면 딱 두 군데만 수정하면 되기 때문에 무척 쉽게 변경 가능하다.
    q: Deque = collections.deque()
    ...
    if q.popleft() != q.pop():
    ...

풀이3) 고(Go)를 이용한 데크 구현
=> Go 언어를 이용하므로 생략

풀이4) 런너를 이용한 우아한 풀이
def isPalindrome(self, head: ListNode) -> bool:
        rev = None
        slow = fast = head
        # 런너를 이용해 역순 연결 리스트 구성
        while fast and fast.next:
            fast = fast.next.next
            rev, rev.next, slow = slow, rev, slow.next
        if fast:
            slow = slow.next

        # 팰린드롬 여부 확인
        while rev and rev.val == slow.val:
            slow, rev = slow.next, rev.next
        return not rev
=> 사실 이 팰린드롬 연결 리스트 문제의 제대로 된 풀이법은 런너(Runner) 기법을 활용하는 것이다.
순서에 따라 2개의 런너, 즉 빠른 런너(Fast Runner)와 느린 런너(Slow Runner)를 각각 출발시키면, 빠른 런너가 끝에 다다를 때 느린 런너는 정확히 중간 지점에 도달하게 될 것이다.
느린 런너는 중간까지 이동하면서 역순으로 연결 리스트 rev를 만들어 나간다 이제 중간에 도달한 느린 런너가 나머지 경로를 이동할 때, 역순으로 만든 연결리스트의 값들과 일치하는지 확인해나가면 된다.
연결 리스트 rev는 결국 slow의 역순 연결 리스트가 될 것이다.
입력값이 홀수일 때와 짝수일 때 마지막 처리가 다른데, 홀수 일 때는 slow 런너가 한 칸 더 앞으로 이동하여 중앙의 값을 빗겨 나가야 한다.

* 런너 기법
런너(Runner)는 연결 리스트를 순회할 때 2개의 포인터를 동시에 사용하는 기법이다.
한 포인터가 다른 포인터보다 앞서게 하여 병합 지점이나 중간 위치, 길이 등을 판별할 때 유용하게 사용할 수 있다.
2개의 포인터는 각각 빠른 런너(Fast Runner), 느린 런너(Slow Runner)라고 부르는데, 대개 빠른 런너는 두 칸씩 건너뛰고 느린 런너는 한 칸씩 이동하게 된다.
이때 빠른 런너가 연결 리스트의 끝에 도달하면, 느린 런너는 정확히 연결 리스트의 중간 지점을 가리키게 된다.
이 같은 방식으로 중간 위치를 찾아내면, 여기부터 값을 비교하거나 뒤집기를 시도하는 등 여러모로 활용할 수 있어 연결 리스트 문제에서는 반드시 쓰이는 기법이기도 하다.

* 다중 할당
파이썬에서 다중 할당은 2개 이상의 값을 2개 이상의 변수에 동시에 할당하는 것을 말한다.
    a,b = 1,2
이처럼 한 번에 여러 개의 값을 여러 변수에 할당할 수 있는 파이썬의 독특한 다중 할당 문법은 매우 유용하며 여러모로 쓰임새가 많다.
동일한 참조를 하지 않도록 주의해야 한다.
왜 = 구문이 값을 할당하는 것이 아닌 서로 같은 값을 참조하게 되는지는 파이썬의 특징에서 기인한다.
파이썬에는 원시 타입(Primitive Types)이 존재하지 않는다. 대신 모든 것이 객체다.
문자와 숫자의 경우 불변 객체라는 점만 다를 뿐이라서, = 연산자를 이용해 할당을 진행하게 되면 값을 할당하는 것이 아니라 불변 객체에 대한 참조를 할당하게 된다.

이 같은 파이썬의 독특한 할당 방식은 다음과 같은 간단한 실험으로도 확인할 수 있다.
5라는 숫자에 대해 숫자 5와 숫자 5를 할당한 변수 a,b 모두 동일한 ID를 갖는다.
즉, 5라는 값은 메모리 상에 단 하나만 존재하며, a,b 두 변수는 각각 이 값을 가리키는 참조라는 의미다.
만약 5가 6으로 변경된다면, a,b 두 변수도 값이 6으로 변경될 것이다. 그러나 숫자는 불변 객체이기 때문에 이런 일은 일어나지 않는다.
반면, 숫자가 아니라 리스트와 같은 자료형이라면, 내부의 값은 얼마든지 변할 수 있다. 이 경우 이 리스트를 참조하는 모든 변수의 값도 따라서 함께 바뀐다.

다중 할당을 하게 되면 할당 작업이 동시에 일어나기 때문에, 모든 작업이 한 번의 트랜잭션으로 끝나게 된다.


문제14. 두 정렬 리스트의 병합
정렬되어 있는 두 연결 리스트를 합쳐라

예제1)
입력: 1->2->4, 1->3->4
출력: 1->1->2->3->4->4

풀이1) 재귀 구조로 연결
def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:
        if (not l1) or (l2 and l1.val > l2.val):
            l1, l2 = l2, l1
        if l1:
            l1.next = self.mergeTwoLists(l1.next, l2)
        return l1
=> 풀이가 명확하고 코드도 길지 않다. 그러나 이 잛은 코드에 너무 많은 내용이 함축되어 있어서 이해하기 쉽지 않을 뿐더러, 재귀가 표함되어 있어 더욱 어렵다.

* 연산자 우선순위
괄호 > 함수 호출 > 슬라이싱 > 배열 > 속성 참조 > 지수 > 비트연산 NOT > 양수,음수 > 곱,나눗셈,나머지 > 덧셈,뺄셈 > 비트 연산자 > 비교 연산자 > 부울 연산자 > 람다 표현

* 변수 스왑
파이썬에서는 임시 변수 업시 스왑이 가능하다.
이 방식은 다중 할당이라 불리우며, 가독성 또한 좋으므로 별다른 이슈가 없는 한 파이썬에서는 이 방식으로 스왑하는 게 가장 좋다.
숫자형인 경우, 간단한 덧셈, 뺄셈을 통해 임시 변수 없이 스왑할 수 있는 방법이 있다.
    x += y
    y = x - y
    x -= y
이 방식은 추가 공간을 필요로 하지 않는다는 점에서 공간 복잡도 또한 필요하지 않은 좋은 풀이다.


문제15. 역순 연결 리스트
연결 리스트를 뒤집어라.

예제1)
입력: 1->2->3->4->5->NULL
출력: 5->4->3->2->1->NULL

풀이1) 재귀 구조로 뒤집기
 def reverseList(self, head: ListNode) -> ListNode:
        def reverse(node: ListNode, prev: ListNode = None):
            if not node:
                return prev
            next, node.next = node.next, prev
            return reverse(next, node)

        return reverse(head)


 풀이2) 반복 구조로 뒤집기
  def reverseList(self, head: ListNode) -> ListNode:
         node, prev = head, None

         while node:
             next, node.next = node.next, prev
             prev, node = node, next

         return prev
=> 마찬가지로 node.next를 이전 prev 리스트로 계속 연결하면서 끝날 때까지 반복한다.
재귀와 반복 중 가독성과 속도, 둘 다 비슷한 속도를 부이므로 둘 중 어느 방식으로 풀이하든 큰 문제는 없다.
다만 반복이 재귀에 비해 70% 수준의 메모리를 차지해 공간 복잡도는 좀 더 낮은 편이며 실행 속도 또한 약간 더 빠른 편이다.

문제16. 두 수의 덧셈
역순으로 저장된 연결 리스트의 숫자를 더하라.

예제1)
입력: (2->4->3) + (5->6->4)
출력: 7->0->8

풀이1) 자료형 변환
 # 연결 리스트 뒤집기
    def reverseList(self, head: ListNode) -> ListNode:
        node, prev = head, None

        while node:
            next, node.next = node.next, prev
            prev, node = node, next

        return prev

    # 연결 리스트를 파이썬 리스트로 변환
    def toList(self, node: ListNode) -> List:
        list: List = []
        while node:
            list.append(node.val)
            node = node.next
        return list

    # 파이썬 리스트를 연결 리스트로 변환
    def toReversedLinkedList(self, result: str) -> ListNode:
        prev: ListNode = None
        for r in result:
            node = ListNode(r)
            node.next = prev
            prev = node

        return node

    # 두 연결 리스트의 덧셈
    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
        a = self.toList(self.reverseList(l1))
        b = self.toList(self.reverseList(l2))

        resultStr = int(''.join(str(e) for e in a)) + \
                    int(''.join(str(e) for e in b))

        # 최종 계산 결과 연결 리스트 변환
        return self.toReversedLinkedList(str(resultStr))

풀이2) 전가산기 구현
 def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
        root = head = ListNode(0)

        carry = 0
        while l1 or l2 or carry:
            sum = 0
            # 두 입력값의 합 계산
            if l1:
                sum += l1.val
                l1 = l1.next
            if l2:
                sum += l2.val
                l2 = l2.next

            # 몫(자리올림수)과 나머지(값) 계산
            carry, val = divmod(sum + carry, 10)
            head.next = ListNode(val)
            head = head.next

        return root.next
=> 연산 결과로 나머지를 취하고 몫은 자리올림수 형태로 올리는 전가산기의 전체적인 구조만 참고해 풀이해본다.

* 숫자형 리스트를 단일 값으로 병합하기
앞에서 숫자형 리스트를 문자형으로 바꿨다가 숫자형으로 다시 한번 바꿔주는 불필요한 작업을 진행했다.
그렇다면 a = [1,2,3,4,5]처럼 숫자형으로 이루어진 리스트가 있을 때 이를 하나로 합치는 좀 더 우아한 코드를 만들어 볼 수 있을까?
    ''.join(str(2) for e in a)
이 방식의 코드는 아무래도 가독성이 떨어지고 영 보기 좋지 않다.
    ''.join(map(str,a))
이 경우 가독성이 좋으며 코드 크기가 줄어든다.
그러나 이 방식도 원래 숫자형인데 문자형으로 바꿨다가 다시 숫자형으로 바꾼다는 부분이 영 마음에 들지 않는다.
애초에 숫자형으로 바로 변경할 수는 없을까?
    functools.reduce(lambda x,y: 10 * x + y, a, 0)
functools는 '함수를 다루는 함수'를 뜻하는 고계 함수(Higher-Order Function)를 지원하는 함수형 언어 모듈이며, 리트 코드에서는 기본적으로 import되어 있다.
여기서 reduce는 두 인수의 함수를 누적 적용하라는 메소드다.
이에 따라 코드의 결과는 ((((1+2)+3)+4)+5)dlek.
이외에도 좀 더 가독성을 높일 수 있도록 operator 모듈을 활용하는 방법도 있다.
이 경우 연산자 명칭(함수)을 reduce() 메소드의 파라미터로 지정할 수 있어 가독성이 매우 높다.
이 또한 고계 함수이기 때문에 이처럼 파라미터로 함수를 넘기는 것이 가능하다.


문제17. 페어의 노드 스왑
연결 리스트를 입력받아 페어 단위로 스왑하라.

예제1)
입력: 1->2->3->4
출력: 2->1->4->3

풀이1) 값만 교환
 def swapPairs(self, head: ListNode) -> ListNode:
        cur = head

        while cur and cur.next:
            # 값만 교환
            cur.val, cur.next.val = cur.next.val, cur.val
            cur = cur.next.next

        return head
=> 연결 리스트의 노드를 변경하는 게 아닌, 노드 구조는 그대로 유지하되 값만 변경하는 방법이다.
사실 이 방식은 실용성과는 다소 거리가 있다.
대개 연결 리스트는 복잡한 여러 가지 값들의 구조체로 구성되어 있고, 사실상 값만 바꾸는 것은 매우 어려운 일이기 때문이다.
그러나 이 문제에서는 단 하나의 값만 바꾸는 것은 매우 어려운 일이기 때문이다.
그러나 이 문제에서는 단 하나의 값으로 구성된 단순한 연결 리스트이고, 값을 바꾸는 정도는 어렵지 않게 가능하다.
이 방법은 온라인 코딩 테스트 시에는 괜찮지만 화이트 보드 면접에서 좋지 않은 피드백을 받을 가능성도 있다.

풀이2) 반복 구조로 스왑
def swapPairs(self, head: ListNode) -> ListNode:
        root = prev = ListNode(None)
        prev.next = head
        while head and head.next:
            # b가 a(head)를 가리키도록
            b = head.next
            head.next = b.next
            b.next = head

            # prev가 b를 가리키도록
            prev.next = b

            # 다음 번 비교를 위해 이동
            head = head.next
            prev = prev.next.next
        return root.next
=> 단순히 값을 바꾸는 일에 비해 연결 리스트 자체를 바꾸는 일은 생각보다 다소 복잡한 문제다.
왜냐하면 단순히 둘만 바꾼다고 끝나는 문제가 아니라, 그 앞의 노드가 가리키는 연결 리스트와 노드로 연결되는 연결 리스트도 다 같이 변경해야 하기 때문이다.

풀이3) 재귀 구조로 스왑
def swapPairs(self, head: ListNode) -> ListNode:
        if head and head.next:
            p = head.next
            # 스왑된 값 리턴 받음
            head.next = self.swapPairs(p.next)
            p.next = head
            return p
        return head


문제18. 홀짝 연결 리스트
연결 리스트를 홀수 노드 다음에 짝수 노드가 오도록 재구성하라. 공간 복잡도 O(1), 시간 복잡도 O(n)에 풀이하라.

예제1)
입력: 1->2->3->4->5->NULL
출력: 1->3->5->2->4->NULL

풀이1) 반복 구조로 홀짝 노드 처리
def oddEvenList(self, head: ListNode) -> ListNode:
        # 예외 처리
        if head is None:
            return None

        odd = head
        even = head.next
        even_head = head.next

        # 반복하면서 홀짝 노드 처리
        while even and even.next:
            odd.next, even.next = odd.next.next, even.next.next
            odd, even = odd.next, even.next

        # 홀수 노드의 마지막을 짝수 헤드로 연결
        odd.next = even_head
        return head
=> 만약 제약이 없을 경우 연결 리스트를 리스트로 바꾸고 파이썬 리스트가 제공하는 슬라이싱과 같은 다양한 함수를 사용하면 좀 더 쉽고 직관적이며 빠르게 풀 수 있다.
그러나 이러한 풀이 방식은 우아하지 않다. 특히 오프라인 코딩 테스트 시에 이 같은 편법을 시도하다가는 면접관에게 다시 풀어달라는 지적을 받게 될 수 있다.


문제19. 역순 연결 리스트2
인덱스 m에서 n까지를 역순으로 만들어라. 인덱스 m은 1부터 시작한다.

예제1)
입력: 1->2->3->4->5->NUL, m=2,n=4
출력: 1->4->3->2->5->NULL

풀이1) 반복 구조로 노드 뒤집기
 def reverseBetween(self, head: ListNode, m: int, n: int) -> ListNode:
        # 예외 처리
        if not head or m == n:
            return head

        root = start = ListNode(None)
        root.next = head
        # start, end 지정
        for _ in range(m - 1):
            start = start.next
        end = start.next

        # 반복하면서 노드 차례대로 뒤집기
        for _ in range(n - m):
            tmp, start.next, end.next = start.next, end.next, end.next.next
            start.next.next = tmp
        return root.next
4장 연결리스트

앞에서 설명했듯이, 동적 배열은 탐색 기능이 막강하며 배열 마지막에서 삽입 및 삭제 연산 속도가 빠르다.
하지만 데이터를 배열 중간에 삽입하거나 삭제해야 할 때는 원소들을 옮겨야 하는 부담이 있다.
연결리스트는 이러한 고민을 해결한다.


** 연결 리스트 이해하기
메모리상에 선형으로 나열된 배열과 달리 연결 리스트는 요소들이 참조로 이어져 있다.
각 요소는 노드라는 틀에 담겨 있는데, 노드는 데이터를 담는 부분(data)와 다음 노드를 가리키는 참조(link)로 구성되어 있다.
연결리스트는 참조가 하나인가 둘인가에 따라 단순 연결 리스트(single linked list)와 이중 연결 리스트(double linked list)로 나눈다.
단순 연결 리스트는 다음 노드를 가리키는 참조 하나만 가지고 있는 반면, 이중 연결 리스트는 앞 노드를 가리키는 참조와 뒤 노드를 가리키는 참조를 모두 가지고 있다.

연결리스트의 삽입/삭제 연산의 빅오는 O(1)이다.
연결리스트의 삭제에서 노드를 삭제할 때는 그저 노드의 링크가 그 다음 링크를 가리키게 하면 된다. 그러면 노드는 별도의 처리가 없어도 메모리에서 사라지는데, 이는 파이썬이 언어 차원에서 대신 지워주기 때문이다. (가비지 컬렉션)
파이썬의 경우 레퍼런스 카운트로 가비지 컬렉션을 지원한다. 레퍼런스 카운팅은 어떤 객체를 가리키는 객체 개수가 0이 될 때 해당 객체를 지우는 것을 의미한다.

연결리스트의 탐색 연산의 빅오는 O(n)이다.
연결리스트의 탐색에서 연결 리스트는 인덱싱과 같은 연산을 구현할 수 없기 때문에 어떤 요소를 찾으려면 리스트의 처음부터 끝까지 하나씩 방문하면서 해당 요소를 찾아야 한다.



** 동적 배열과 연결 리스트
동적 배열은 탐색에 빠르지만 중간 요소를 삽입/삭제해야 하는 경우 느리다.
연결 리스트는 중간 요소를 삽입/삭제해야 하는 경우 빠르지만 탐색에 느리다.
연결 리스트 그 자체만으로는 동적 배열에 비해 쓰임새가 적은 편이다.
그럼에도 연결 리스트가 중요한 이유는 다른 자료 구조를 구현하는 토대가 되기 때문이다. (특히 트리는 대부분 연결 리스트로 구현된다.)



** 더미 이중 연결 리스트
보통 연결 리스트라고 하면 더미 이중 연결리스트(dummy double linked list)를 의미한다.

<파이썬으로 더미 이중 연결 리스트의 ADT 작성해보기>
1. empty() -> Boolean
: 비어 있으면 TRUE, 아니면 FALSE 반환

2. size() -> Integer
: 요소 개수 반환

3. add_first(data)
: data를 리스트의 맨 앞에 추가

4. add_last(data)
: data를 리스트의 맨 마지막에 추가

5. insert_after(data,node)
: data를 node 다음에 삽입

6. insert_before(data, node)
: data를 node 이전에 삽입

7. search_forward(target) -> node
: target을 리스트의 맨 처음부터 찾아 나가다 리스트에 있으면 노드 반환, 그렇지 않으면 None 반환

8. search_backward(target) -> node
: target을 리스트의 맨 마지막부터 찾아 나가다 리스트에 있으면 노드 반환, 그렇지 않으면 None 반환

9. delete_first()
: 리스트의 첫 번째 요소 삭제

10. delete_last()
: 리스트의 마지막 요소 삭제

11. delete_node(node)
: node 삭제



코드 4-1. 노드
class Node:
    def __init_-(self, data=None):
        self.__data = data
        self.__prev = None
        self.__next = None

    # 소멸자: 객체가 사라지기 전 반드시 호출됩니다.
    # 삭제 연산 때 삭제되는 것을 확인하고자 작성했습니다.
    def __del__(self):
        print("data of {} is deleted".format(self,data))

    @property
    def data(self):
        return self.__data

    @property
    def data(self, data):
        self.__data = data

    @property
    def prev(self):
        return self.__prev

    @property
    def prev(self, p):
        self.__prev = p

    @property
    def next(self):
        return self.__next

    @next.setter
    def next(self, n):
        self.__next = n



코드 4-2. DoubleLinkedList
class DoubleLinkedList:
    def __init__(self):
        # 리스트의 맨 처음과 마지막은 실제 게이터를 저장하지 않는 노드입니다. 이를 더미 노드라고 합니다.
        self.head = Node()
        self.tail = Node()
        # 초기화
        # head와 tail을 연결합니다.
        self.head.next = self.tail
        self.tail.prev = self.head
        # 데이터 개수를 저장할 변수입니다.
        self.d_size = 0



코드 4-3. empty() 메서드
def empty(self):
    if self.d_size == 0:
        return True
    else:
        return False



코드 4-4. size() 메서드
def size(self):
    return self.d_size



코드 4-5. add_first() 메서드
def add_first(self, data):
    new_node = Node(data)
    new_node.next = self.head.next
    new_node.prev = self.head

    self.head.next.prev = new_node
    self.head.next = new_node

    self.d_size += 1



코드 4-6. add_last() 메서드
def add_last(self, data):
    new_node = Node(data)

    new_node.prev = self.tail.prev
    new_node.next = self.tail

    self.tail.prev.next = new_node
    self.tail.prev = new_node

    self.d_size += 1



코드 4-7. insert_after() 메서드
def insert_after(self, data, node):
    new_node = Node(data)

    new_node.next = node.next
    new_node.prev = node

    node.next.prev = new_node
    node.next = new_node

    self.d_size += 1



코드 4-8. insert_before() 메서드
def insert_before(self, data, node):
    new_node = Node(data)

    new_node.prev = node.prev
    new_node.next = node

    node.prev.next = new_node
    node.prev = new_node

    self.d_size += 1



코드 4-9. search_forward() 메서드
def search_forward(self, target):
    cur = self.head.next

    while cur is not self.tail:
        if cur.data == target:
            return cur
        cur = cur.next
    return None



코드 4-10. search_backward() 메서드
def search_backward(self, target):
    cur = self.tail.prev
    while cur is not self.head:
        if cur.data == target:
            return cur
        cur = cur.prev
    return None



코드 4-11. delete_first() 메서드
def delete_first(self):
    if self.empty():
        return
    self.head.next = self.head.next.next
    self.head.next.prev = self.head

    self.d_size -= 1



코드 4-12. delete_last() 메서드
def delete_last(self):
    if self.empty():
        return
    self.tail.prev = self.tail.prev.prev
    self.tail.prev.next = self.tail

    self.d_size -= 1






9장 스택, 큐

스택(Stack)과 큐(Queue)
스택은 LIFO(Last-In-First-Out,후입선출), 큐는 FIFO(First-In-First-Out,선입선출)로 처리된다.
파이썬은 스택 자료형을 별도로 제공하지는 않지만, 리스트가 사실상 스택의 모든 연산을 지원한다.
큐 또한 마찬가지다. 리스트는 큐의 모든 연산을 지원한다.
다만 리스트는 동적 배열로 구현되어 있어 큐의 연산을 수행하기에는 효율적이지 않기 때문에, 큐를 위해서는 데크(Deque)라는 별도의 자료형을 사용해야 좋은 성능을 낼 수 있다.
그러나 굳이 성능을 고려하지 않는다면 리스트는 스택과 큐의 모든 연산을 지원하기 때문에 사실상 리스트를 잘 사용하기만 해도 충분하다.

* 스택
스택은 다음과 같은 2가지 주요 연산을 지원하는 요소의 컬렉션으로 사용되는 추상 자료형이다.
- push(): 요소를 컬렉션에 추가한다.
- pop(): 아직 제거되지 않은 가장 최근에 삽입된 요소를 제거한다.

스택은 거의 모든 애플리케이션을 만들 때 사용되는 자료구조로서, 스택과 연관된 알고리즘을 제대로 이해하느냐 못 하느냐에 따라서 기본 알고리즘을 설계할 수 있느냐 없느냐가 결정되기도 한다.

* 연결 리스트를 이용한 스택 ADT 구현
연결리스트를 이용해 실제로 스택을 구현해보자.
먼저 다음과 같이 연결 리스트를 담을 Node 클래스부터 정의한다.
    class Node:
        def __init__(self, item, next):
            self.item = item
            self.next = next
초기화 함수 __init__()에서 노드의 값은 item으로, 다음 노드를 가리키는 포인터는 next로 정의한다.
이제 스택의 연산인 push()와 pop()을 담은 Stack 클래스를 다음과 같이 정의한다.
class Stack:
    def __init__(self):
        self.last = None

    def push(self, item):
        self.last = Node(item, self.last)

    def pop(self):
        item = self.last.item
        self.last = self.last.next
        return item

push()는 연결 리스트에 요소를 추가하면서 가장 마지막 값을 next로 지정하고, 포인터인 last는 가장 마지막으로 이동시킨다.
pop()은 가장 마지막 아이템을 끄집어내고 last 포인터를 한 칸 앞으로 전진시킨다. 즉 이전에 추가된 값을 가리키게 한다.



문제20. 유효한 괄호
괄호로 된 입력값이 올바른지 판별하라

예제1)
입력: ()[]{}
출력: true

풀이1) 스택 일치 여부 판별
def isValid(self, s: str) -> bool:
        stack = []
        table = {
            ')': '(',
            '}': '{',
            ']': '[',
        }

        # 스택 이용 예외 처리 및 일치 여부 판별
        for char in s:
            if char not in table:
                stack.append(char)
            elif not stack or table[char] != stack.pop():
                return False
        return len(stack) == 0
=> (,[,{는 스택에 push하고 ),],}를 만날 때 스택에서 pop한 결과가 매핑 테이블 결과와 매칭되는지 확인하면 된다.
여기서는 먼저 매핑 테이블을 만들어 놓고 테이블에 존재하지 않으면 무조건 푸시하고, 팝햇을 때 결과가 일치하지 않으면 False를 리턴하도록 다음과 같이 구현했다.
파이썬 리스트는 스택 연산인 push와 pop이 O(1)에 동작하기 때문에 성능에도 큰 문제가 없다.
이제 실제로 실행시키기 위해서는 예외 처리가 필요하다.


문제21. 중복 문자 제거
중복된 문자를 제외하고 사전식 순서(Lexicographical Order)로 나열하라.

예제1)
입력: "bcabc"
출력: "abc"

풀이1) 재귀를 이용한 분리
def removeDuplicateLetters(self, s: str) -> str:
        # 집합으로 정렬
        for char in sorted(set(s)):
            suffix = s[s.index(char):]
            # 전체 집합과 접미사 집합이 일치할때 분리 진행
            if set(s) == set(suffix):
                return char + self.removeDuplicateLetters(suffix.replace(char, ''))
        return ''

풀이2) 스택을 이용한 문자 제거
def removeDuplicateLetters(self, s: str) -> str:
        counter, seen, stack = collections.Counter(s), set(), []

        for char in s:
            counter[char] -= 1
            if char in seen:
                continue
            # 뒤에 붙일 문자가 남아 있다면 스택에서 제거
            while stack and char < stack[-1] and counter[stack[-1]] > 0:
                seen.remove(stack.pop())
            stack.append(char)
            seen.add(char)

        return ''.join(stack)


문제22. 일일 온도
매일 화씨 온도 리스트 T를 입력받아서, 더 따뜻한 날씨를 위해서는 며칠을 더 기다려야 하는지를 출력하라.

예제1)
입력: T = [73,74,75,71,69,72,76,73]
출력: [1,1,4,2,1,1,0,0]

풀이1) 스택 값 비교
def dailyTemperatures(self, T: List[int]) -> List[int]:
        answer = [0] * len(T)
        stack = []
        for i, cur in enumerate(T):
            # 현재 온도가 스택 값보다 높다면 정답 처리
            while stack and cur > T[stack[-1]]:
                last = stack.pop()
                answer[last] = i - last
            stack.append(i)

        return answer


* 큐
큐는 시퀀스의 한쪽 끝에는 엔티티를 추가하고, 다른 반대쪽 끝에는 제거할 수 있는 엔티티 컬렉션이다.
FIFO(First-In-First-Out,선입선출)로 처리되는, 줄을 서는 것에 비유할 수 있는 큐는 상대적으로 스택에 비해서는 쓰임새가 적다.
그러나 스택에 비해서 그렇다는 얘기일 뿐, 이후에 살펴보게 될 데크(Deque)나 우선순위 큐(Priority Queue) 같은 변형들은 여러 분야에서 매우 유용하게 쓰인다.
이외에도 너비 우선 탐색(Breadth-First Search, BFS)이나 캐시 등을 구현할 때도 널리 사용된다.
파이썬에는 동일한 이름의 queue라는 모듈이 있긴 하지만 이 모듈은 사실상 자료구조로서의 큐보다는 동기회 기능에 집중된 모듈로, 큐 자료형을 위해 널리 쓰이는 모듈은 아니다.
사실상 리스트의 큐는 모든 연산을 지원하기 때문에 그대로 사용해도 무방하지만 좀 더 나은 성능을 위해서는 이후에 살펴볼 양방향 삽입, 삭제가 모두 O(1)에 가능한 데크를 사용하는 편이 가장 좋다.

문제23. 큐를 이용한 스택 구현
큐를 이용해 다음 연산을 지원하는 스택을 구현하라.
- push(x): 요소 x를 스택에 삽입한다.
- pop(): 스택의 첫 번째 요소를 삭제한다.
- top(): 스택의 첫 번째 요소를 가져온다.
- empty(): 스택이 비어 있는지 여부를 리턴한다.

풀이1) push()할 때 큐를 이용해 재정렬
class MyStack:
    def __init__(self):
        self.q = collections.deque()

    def push(self, x):
        self.q.append(x)
        # 요소 삽입 후 맨 앞에 두는 상태로 재정렬
        for _ in range(len(self.q) - 1):
            self.q.append(self.q.popleft())

    def pop(self):
        return self.q.popleft()

    def top(self):
        return self.q[0]

    def empty(self):
        return len(self.q) == 0
=> 스택이나 큐 ADT(추상 자료형)를 실제로 구현할 때는, 대개 스택은 연결리스트로 하고 큐는 배열로 한다.
그런데 여기서는 재밌게도 큐로 스택을 디자인하라고 한다. 이 문제는 스택을 그저 활용하기만 하면 되지만, 만약 스택까지 직접 구현하게 된다면 큐를 스택으로 구현하고, 스택은 연결 리스트로 구현하는 구조가 될 것이다.
파이썬의 리스트나 데크는 스택과 큐의 모든 기능을 제공하기 때문에 이 문제는 원래 큐 ADT에는 없지만 파이써느이 자료형에서 지원하는 기능을 사용하면 매우 쉽게 풀 수도 있다.

큐를 데크로 선언했지만 문제의 의도에 맞게 여기서는 큐의 연산만을 사용해 구현할 것이다.
push()할 때만 다소 복잡한 편인데, 다음과 같이 요소를 삽입한 후에 방금 삽입한 요소를 맨 앞에 두는 상태로 전체를 재정렬한다.
이렇게 하면 큐에서 맨 앞 요소를 끄집어낼 때 스택처럼 가장 먼저 삽입한 요소가 나오게 될 것이다.
물론 요소 삽입 시 시간 복잡도가 O(n)이 되어 다소 비효율적이긴 하지만, 이렇게 하면 스택을 큐로 어렵지 않게 구현할 수 있다.


문제24. 스택을 이용한 큐 구현
스택을 이용해 다음 연산을 지원하는 큐를 구현하라.
- push(x): 요소 x를 큐 마지막에 삽입한다.
- pop(): 큐 처음에 있는 요소를 제거한다.
- peek(): 큐 처음에 있는 요소를 조회한다.
- empty(): 큐가 비어 있는지 여부를 리턴한다.

풀이1) 스택 2개 사용
class MyQueue:
    def __init__(self):
        self.input = []
        self.output = []

    def push(self, x):
        self.input.append(x)

    def pop(self):
        self.peek()
        return self.output.pop()

    def peek(self):
        # output이 없으면 모두 재입력
        if not self.output:
            while self.input:
                self.output.append(self.input.pop())
        return self.output[-1]

    def empty(self):
        return self.input == [] and self.output == []
=> 이번에는 반대로 큐를 스택으로 구현하는 방법이다.
여기선느 앞서와는 다른 중요한 차이점이 있다. 지난 풀이에서는 큥[ 요소를 삽입한 후 맨 앞의 요소부터 끄집어냈다.
그렇게 해서 원래의 큐에 덧붙여 나가는 형태로, 추가 공간 없이 풀이가 가능했다.
그러나 이번에는 맨 뒤의 아이템을 끄집어낼 수밖에 없다.
이렇게 하면 다음번에 또 다시 맨 뒤의 아이템을 끄집어 내게 되는데, 결국은 무한반복 문제에서 헤어나올 수 없다는 점이 문제다.
즉, 이전과 동일하게 하나의 큐를 이용해서 풀이할 수 없다.
따라서, 이 문제를 스택의 연산만을 사용해서 풀기 위해서는 2개의 스택이 필요하다.
특히 pop()과 peek()는 결국 같은 데이터를 끄집어낸다는 점에 착안해, 이번에는 pop()을 할 때 peek()를 호출하고 여기에 재입력하는 알고리즘을 다음과 같이 구현했다.
또한 이렇게 구현해도 output의 값이 모두 pop()되기 전까지는 다시 재입력이 일어나지 않기 때문에, 분할 상환 분석에 따른 시간 복잡도는 여전히 O(1)이다.
앞서 문제와 달리 좀 더 효율적으로 구현하기 위해 2개의 스택을 사용했고, 앞서와 달리 push()는 간단한 반면, 여기서는 peek()를 좀 더 복잡한 형태로 구현했다.


문제 25. 원형 큐 디자인
원형 큐를 디자인하라.

원형 큐라는 명칭은 생소할 수도 있을 것 같다. 오래된 국내 책에서는 '원형 큐'가 아닌 '환형 큐'로 표기되어 있어, 예전에 공부한 분들이라면 '환형 큐'라는 명칭이 더 낯익을지도 모르겠다.
'원형 큐'는 FIFO 구조를 지닌다는 점에서 기존의 큐와 동일하다.
그러나 마지막 위치가 시작 위치와 연결되는, 원형 구조를 띠기 때문에, 링 버퍼(Ring Buffer)라고 부른다.
기존의 큐는 공간이 꽉 차게 되면 더 이상 요소를 추가할 수 없었다. 심지어 앞쪽에 요소들이 deQueue()로 모두 빠져서 충분한 공간이 남게 돼도 그쪽으로는 추가할 수 있는 방법이 없다.
그래서 앞쪽에 공간이 남아 있다면 그림처럼 동그랗게 연결해 앞쪽으로 추가할 수 있도록 재활용 가능한 구조가 바로 원형 큐이다.

동작하는 원리는 투 포인터와도 비슷하다. 마지막 위치와 시작 위치를 연결하는 원형 구조를 만들고, 요소의 시작점과 끝점을 따라 투 포인터가 움직인다.
enQueue()를 하게 되면 rear 포인터가 앞으로 이동하고, deQueue()를 하게 되면 front 포인터가 앞으로 이동한다.
이렇게 enQueue()와 deQueue()를 반복하게 되면 서로 동그랗게 연결되어 있기 때문에 투 포인터가 빙글빙글 돌면서 이동하는 구조가 된다.
만약 rear 포인터가 front 포인터와 같은 위치에서 서로 만나게 된다면, 다시 말해 만나는 위치까지 이동했다면, 그때는 정말로 여유 공간이 하나도 없다는 얘기가 되므로 공간 부족 에러를 발생시킨다.

풀이1) 배열을 이용한 풀이
class MyCircularQueue:
    def __init__(self, k: int):
        self.q = [None] * k
        self.maxlen = k
        self.p1 = 0
        self.p2 = 0

    # enQueue(): 리어 포인터 이동
    def enQueue(self, value: int) -> bool:
        if self.q[self.p2] is None:
            self.q[self.p2] = value
            self.p2 = (self.p2 + 1) % self.maxlen
            return True
        else:
            return False

    # deQueue(): 프론트 포인터 이동
    def deQueue(self) -> bool:
        if self.q[self.p1] is None:
            return False
        else:
            self.q[self.p1] = None
            self.p1 = (self.p1 + 1) % self.maxlen
            return True

    def Front(self) -> int:
        return -1 if self.q[self.p1] is None else self.q[self.p1]

    def Rear(self) -> int:
        return -1 if self.q[self.p2 - 1] is None else self.q[self.p2 - 1]

    def isEmpty(self) -> bool:
        return self.p1 == self.p2 and self.q[self.p1] is None

    def isFull(self) -> bool:
        return self.p1 == self.p2 and self.q[self.p1] is not None
=> 원형 큐를 구현하는 방법에는 여러 가지가 있으나 여기서는 가장 일반적인 방법인 배열로 구현해본다.
아울러 배열로 구현했을 때 공간을 재활용한다는 원형의 이점을 내세울 수 있기도 하다.
여기서 구현한 모든 연산은 리트코드 문제의 풀이 기준을 따랐으나, 원래 큐에는 Rear() 연산이 없다.
큐는 맨 앞에 있는 요소를 가져오는 front() 또는 peek()라는 이름으로 정의된 연산만 있기 때문이다.
그러나 원형 큐를 구현하기 위해서는 2개의 포인터를 사용하는 만큼, Rear() 연산을 구현하는 일이 그리 어려운 일은 아니다.







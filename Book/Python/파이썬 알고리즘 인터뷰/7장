3부 선형 자료 구조

데이터 요소가 순차적으로 배열되는 자료구조를 선형 자료구조라고 한다.
선형 자료구조는 단일 레벨로 구성된다. 따라서 한번에 탐색이 가능하며, 구현하기도 쉽다.
배열, 스택, 큐, 연결 리스트 등이 모두 선형 자료구조에 속한다.

7장 배열

배열은 값 또는 변수 엘리먼트의 집합으로 구성된 구조로, 하나 이상의 인덱스 또는 키로 식별된다.
자료구조는 크게 메모리 공간 기반의 연속 방식과 포인터 기반의 연결 방식으로 나뉜다.
배열은 이 중에서 연속 방식의 가장 기본이 되는 자료형이다.
연결 방식의 가장 기본이 되는 자료형은 바로 다음 8장에서 살펴보게될 '연결 리스트'다.
추상 자료형(Abstract Data Type, ADT)의 실제 구현 대부분은 배열 또는 연결 리스트를 기반으로 한다.

배열은 어느 위치에서나 O(1)에 조회가 가능하다는 장점이 있다. 즉시 주소를 계산할 수 있고 언제든 해당 메모리 주소에 있는 값을 O(1)에 조회 가능하다.
앞서 배열이란 고정된 크기만큼의 연속된 메모리 할당이라고 설명했지만 실제 데이터에서는 전체 크기를 가늠하기 힘들 떄가 많다.
이러한 고민을 해결하고 크기를 지정하지 않고 자동으로 리사이징하는 배열인 동적 배열이 등장했다.

대부분의 프로그래밍 언어는 동적 배열을 지원하며, 파이썬에서는 리스트가 바로 동적 배열 자료형이다. 대부분의 프로그래밍 언어들은 아예 정적 배열 자체가 없다.
파이썬에서도 정적 배열은 따로 제공하지 않으며 동적 배열인 리스트만 제공한다.

동적 배열의 원리는 간단하다. 미리 초깃값을 작게 잡아 배열을 생성하고, 데이터가 추가되면서 꽉 채워지면, 늘려주고 모두 복사하는 식이다.
대개는 더블링(Doubling)이라 하여 2배씩 늘려주게 되는데, 당연히 모든 언어가 항상 그런 것은 아니며 각 언어마다 늘려가는 비율은 상이하다.
파이썬의 더블링 구조에 따르면 파이썬은 0,4,8,16, ... 순으로 재할당하도록 정의되어 있다.
이 재할당 비율은 그로스 팩터(Growth Factor), 즉 '성장 인자'라고 한다. 파이썬의 그로스 팩터는 초반에는 2배씩 늘려 가지만, 전체적으로는 약 1.125배로, 다른 언어에 비해서는 다소 조금만 늘려가는 형태로 구현되어 있다.
이처럼 동적 배열은 정적 배열과 달리 크기를 지정할 필요가 없어 매우 편리하게 활용할 수 있으며, 조회 또한 기본의 배열과 동일하게 O(1)에 가능하다.
그러나 더블링이 필요한 만큼 공간이 차게 되면, 새로운 메모리 공간에 더 큰 크기의 배열을 할당하고 기존의 데이터를 복사하는 작업이 필요하므로 O(n) qldyddl qkftodgksek.
즉 퇴악의 경우 삽입 시 O(n)이 되지만 자주 일어나는 일은 아니므로, 4장에서 설명한 대로 분할 상환 분석에 따른 입력 시간은 여전히 O(1)이다.


문제7. 두수의 합
덧셈을 하여 타겟을 만들 수 있는 배열의 두 숫자 인덱스를 리턴하라.

예제1)
입력: nums = [2, 7, 11, 15], target = 9
출력: [0,1]

풀이1) 브루트 포스로 계산
def twoSum(self, nums: List[int], target: int) -> List[int]:
    for i in range(len(nums)):
        for j in range(i + 1, len(nums)):
            if nums[i] + nums[j] == target:
                return [i, j]
=> 배열을 2번 반복하면서 모든 조합을 더해서 일일이 확인해보는 무차별 대입 방식인 브루트 포스로 풀이 가능하다.
차례대로 모두 비교하며 정답을 찾을 때까지 계속 진행한다. 이 경우 풀이 시간 복잡도는 O(n^2)이다.
문제가 풀리기는 하지만 브루트 포스 방식은 지나치게 느리다. 좀 더 최적화할 수 있는 방안을 고민해야 한다.

풀이2) in을 이용한 탐색
def twoSum(self, nums: List[int], target: int) -> List[int]:
    for i , n in enumerate(nums):
        complement = target - n

        if complement in nunms[i + 1:]:
            return [nums.index(n), nums[i + 1:].index(complement) + (i + 1)]
=> 여기서 in의 시간 복잡도는 O(n)이고, 따라서 전체 시간 복잡도는 이전과 동일한 O(n^2)이다.
그런데 여기서는 같은 시간 복잡도라도 in 연산 쪽이 훨씬 더 가볍고 빠르다. 파이썬의 내 함수로 구현된 in은 파이썬 레벨에서 매번 값을 비교하는 것에 비해 훨씬 더 빨리 실행된다.

풀이3) 첫 번째 수를 뺀 결과 키 조회
def twoSum(self, nums: List[int], target: int) -> List[int]:
    nums_map = {}
    for i, num in enumerate(nums):
        nums_map[num] = i

    for i, num in enumerate(nums):
        if target - num in nums_map and i != nums_map[target - num]:
            return [i, nums_map[target - num]]
=> 이 경우 타겟에서 첫 번째 수를 빼면 두 번째 수를 바로 알아낼 수 있다. 두 번째 수를 키로 하고 기존의 인덱스는 값으로 바꿔서 딕셔너리로 저장해두면, 나중에 두 번째 수를 키로 조회해서 정답을 즉시 찾아낼 수 있을 것이다.
딕셔너리는 해시 테이블로 구현되어 있고, 이 경우 조회는 평균적으로 O(1)에 가능하다. 최악의 경우에는 O(n)이 될 수 있지만 말 그대로 최악의 경우이고 드문 경우이므로, 4장에서 살펴본 분할 상환 분석에 따른 시간 복잡도는 O(1)이며, 전체는 O(n)으로 앞의 풀이보다 훨씬 더 빠른 속도를 보여준다.

풀이4) 조회 구조 개선
def twoSum(self, nums: List[int], target: int) -> List[int]:
    nums_map = {}
    for i, num in enumerate(nums):
        if target - num in nums_map:
            return [nums_map[target - num], i]
        nums_map[num] = i
=> 딕셔너리 저장과 조회를 2개의 for 문으로 각각 처리했던 방식을 좀 더 개선해서 이번에는 하나의 for로 합쳐서 처리해보자.
이 경우 전체를 모두 저장할 필요 없이 정답을 찾게 되면 함수를 바로 빠져나올 수 있다.
그러나 두 번째 값을 찾기 위해 어차피 매번 비교해야 하기 때문에 앞서 풀이에 비해 성능상의 큰 이점은 없을 것 같다.

풀이 5) 투 포인터 이용
def twoSum(self, nums: List[int], target: int) -> List[int]:
    left, right = 0, len(nums) -1
    while not left == right:
        if nums[left] + nums[right] < target:
            left += 1
        elif nums[left] + nums[right] > target:
            right -= 1
        else:
            return [left, right]
=> 투 포인터란 왼쪽 포인터와 오른쪽 포인터의 합이 타겟보다 크다면 오른쪽 포인터를 왼쪽으로, 작다면 인쪽 포인터를 오른쪽으로 옮기면서 값을 조정하는 방식이다.
이처럼 투 포인터로 구현해보니 코드도 간결하고 이해하기 쉽다. 투 포인터의 시간 복잡도도 O(n)이고, 불필요한 추가 계산도 필요 없어, 매우 빠른 속도가 기대된다.
그러나 이 문제는 투 포인터로 풀 수 없다. 입력값인 nums가 정렬된 상태가 아니기 때문이다. 만약 sort() 메서드를 이용하여 정렬할 경우, 인덱스는 모두 엉망이 되기 때문에 심각한 문제가 발생한다.
이처럼 인덱스를 찾아내는 문제에서는 이렇게 정렬을 통해 인덱스를 섞어 버리면 곤란하다. 원래 인덱스를 찾을 수가 없기 때문이다.


문제8. 빗물 트래핑
높이를 입력받아 비 온 후 얼마나 많은 물이 쌓일 수 있는지 계산하라.

예제1)
입력: [0,1,0,2,1,0,1,3,2,1,2,1]
출력: 6

풀이1) 투 포인터를 최대로 이동
def trap(self, height: List[int]) -> int:
    if not height:
        return 0

    volume = 0
    left, right = 0, len(height) - 1
    left_max, right_max = height[left], height[right]

    while left < right:
        left_max, right_max = max[height[left], left_max), max[height[right], right_max)
        if left_max <= right_max:
            volume += left_max - height[left]
            left += 1
        else:
            volume += right_max - height[right]
            right -= 1
        return volume
=> 이 문제는 높이와 너비 모든 공간을 차례대로 모두 살펴보면 O(n^2)에 풀이가 가능하다. 그러나 시간 복잡도가 너무 높기 때문에 좀 더 효율적인 풀이를 찾아야 한다.
해당 풀이는 최대 높이의 막대까지 각각 좌우 기둥 최대 높이 left_max, right_max가 현재 높이와의 차이만큼 물 높이 volume을 더해 나간다.
이 경우 적어도 낮은 쪽은 그만큼 항상 채워질 것이기 때문에, 좌우 어느쪽이든 낮은 쪽은 높은 쪽을 향해서 포인터가 가운데로 점점 이동한다.
오른쪽이 크다면 left += 1로 왼쪽이 이동하고, 그렇지 않다면 right -= 1로 오른쪽이 이동한다. 이렇게 하면 가장 높은 막대, 즉 '최대' 지점에서 좌우 포인터가 서로 만나게 되며 O(n)에 풀이가 가능하다.

풀이2) 스택 쌓기
def trap(self, height: List[int] -> int:
    stack = []
    volume = 0

    for i in range(len(height)):
        while stack and height[i] > height[stack[-1]]:
            top = stack.pop()

            if not len(stack):
                break

            distance = i - stack[-1] -1
            waters = min(height[i], height[stack[-1]]) - height[top]
            volume += distance * waters

        stack.append(i)
    return volume
=> 스택에 쌓아 나가면서 현재 높이가 이전 높이보다 높을 때, 즉 꺾이는 부분 변곡점을 기준으로 격차만큼 물 높이 volume를 채운다.
이전 높이는 고정된 형태가 아니라 들쑥날쑥하기 때문에, 계속 스택으로 채워 나가다가 변곡점을 만날 때마다 스택에서 하나씩 꺼내면서 이전과의 차이만큼 물 높이를 채워 나간다.
스택으로 이전 항목들을 되돌아 보며 체크하기는 하지만, 기본적으로 한 번만 살펴보기 때문에 마찬가지로 O(n)에 풀이가 가능하다.


문제9. 세 수의 합
배열을 입력받아 합으로 0을 만들 수 있는 3개의 엘리먼트를 출력하라.

예제1)
입력: nums = [-1, 0, 1, 2, -1, -4]
출력:
[
    [-1, 0, 1],
    [-1, -1, 2]
]

풀이1) 브루트 포스로 계산
def threeSum(self, nums: List[int]) -> List[List[int]]:
        results = []
        nums.sort()

        # 브루트 포스 n^3 반복
        for i in range(len(nums) - 2):
            # 중복된 값 건너뛰기
            if i > 0 and nums[i] == nums[i - 1]:
                continue
            for j in range(i + 1, len(nums) - 1):
                if j > i + 1 and nums[j] == nums[j - 1]:
                    continue
                for k in range(j + 1, len(nums)):
                    if k > j + 1 and nums[k] == nums[k - 1]:
                        continue
                    if nums[i] + nums[j] + nums[k] == 0:
                        results.append([nums[i], nums[j], nums[k]])

        return results
=> 가장 먼저 브루트 포스로 풀이해보자. 언뜻 보면 O(n^3) 정도에 풀이가 가능해 보인다. 그러나 이 경우 타임 아웃이 발생해 풀리지 않을 것도 같다.
i,j,k 포인터가 계속 이동하면서 i+j+k=0을 찾아낸다.

풀이2) 투 포인터로 합 계산
def threeSum(self, nums: List[int]) -> List[List[int]]:
        results = []
        nums.sort()

        for i in range(len(nums) - 2):
            # 중복된 값 건너뛰기
            if i > 0 and nums[i] == nums[i - 1]:
                continue

            # 간격을 좁혀가며 합 `sum` 계산
            left, right = i + 1, len(nums) - 1
            while left < right:
                sum = nums[i] + nums[left] + nums[right]
                if sum < 0:
                    left += 1
                elif sum > 0:
                    right -= 1
                else:
                    # `sum = 0`인 경우이므로 정답 및 스킵 처리
                    results.append([nums[i], nums[left], nums[right]])

                    while left < right and nums[left] == nums[left + 1]:
                        left += 1
                    while left < right and nums[right] == nums[right - 1]:
                        right -= 1
                    left += 1
                    right -= 1

        return results
=> i를 축으로 하고 중복된 값을 건너뛰게 한 부분은 앞선 풀이와 동일하다.
앞의 풀이아 차이점은 i의 다음 지점과 마지막 지점을 left, right로 설정하고 간격을 좁혀가며 sum을 계산하는 부분이다.
투 포인터가 간격을 좁혀나가며 합 sum을 계산한다. 투 포인터를 사용하면서 기본의 O(n^3) 풀이를 O(n^2)으로 개선 가능하다.

** 투 포인터
투 포인터라는 기법이 지속적으로 등장한다. 투 포인터는 무엇이며 어떤 기법을 말하는 걸까?
여러 가지 방식이 있지만, 대개는 시작점과 끝점 또는 왼쪽 포인터와 오른쪽 포인터 두 지점을 기준으로 하는 문제 풀이 전략을 뜻한다.
범위를 좁혀 나가기 위해서는, 일반적으로 배열이 정렬되어 있을 때 좀 더 유용하다.


문제10. 배열 파티션1
n개의 페어를 이용한 min(a,b)의 합으로 만들 수 있는 가장 큰 수를 출력하라.

예제1)
입력: [1,4,3,2]
출력: 4

풀이1) 오름차순 풀이
def arrayPairSum(self, nums: List[int]) -> int:
        sum = 0
        pair = []
        nums.sort()

        for n in nums:
            # 앞에서 부터 오름차순으로 페어를 만들어 합 계산
            pair.append(n)
            if len(pair) == 2:
                sum += min(pair)
                pair = []

        return sum
=> 페어의 min()을 합산했을 때 최대를 만드는 것은 결국 min()이 되도록 커야 한다는 뜻이고, 뒤에서부터 내림차순으로 집어넣으면 항상 최대 min() 페어를 유지할 수 있다.

풀이2) 짝수 번째 값 계산
def arrayPairSum(self, nums: List[int]) -> int:
        sum = 0
        nums.sort()

        for i, n in enumerate(nums):
            # 짝수 번째 값의 합 계산
            if i % 2 == 0:
                sum += n

        return sum
=> 페어에 대해 일일이 min() 값을 구하지 않아도 짝수 번째 값을 더하면 된다.

풀이3) 파이썬다운 방식
def arrayPairSum(self, nums: List[int]) -> int:
        return sum(sorted(nums)[::2])
=> 앞서 살펴본 슬라이싱을 활용하면 놀랍게도 단 한줄로도 풀이가 가능하다.


문제11. 자신을 제외한 배열의 곱
배열을 입력받아 output[i]가 자신을 제외한 나머지 모든 요소의 곱셉 결과가 되도록 출력하라.
주의. 나눗셈을 하지 않고 O(n)에 풀이하라.

예제1)
입력: [1,2,3,4]
출력: [24,12,8,6]

풀이1) 왼쪽 곱셉 결과에 오른쪽 값을 차례대로 곱셈
class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        out = []
        p = 1
        # 왼쪽 곱셈
        for i in range(0, len(nums)):
            out.append(p)
            p = p * nums[i]
        p = 1
        # 왼쪽 곱셈 결과에 오른쪽 값을 차례대로 곱셈
        for i in range(len(nums) - 1, 0 - 1, -1):
            out[i] = out[i] * p
            p = p * nums[i]
        return out
=> 자기 자신을 제외하고 왼쪽의 곱셈 결과와 오른쪽의 곱셈 결과를 곱해야 한다.
이처럼 변수 i가 오른쪽으로 이동하면서 해당 인덱스의 값을 곱해 나간 다음, 오른쪽에서 곱해서 넣는다.
여기서 만약 별도의 그 변수에 우측 곱셈 결과를 넣으면 공간 복잡도는 O(n)이 된다.
그러나 기존 out 변수를 재활용한다면 공간 복잡도 O(1)에 풀이가 가능하다.
참고로 출력에 필요한 공간은 공간복잡도에 포함되지 않는다.
이번에는 왼쪽의 곱셈 결과에 오른쪽 마지막 값부터 차례대로 곱해 나간다.


문제12. 주식을 사고팔기 가장 좋은 시점
한 번의 거래로 낼 수 있는 최대 이익을 산출하라.

예제1)
입력: [7,1,5,3,6,4]
출력: 5

풀이1) 브루트 포스로 계산
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        max_price = 0

        for i, price in enumerate(prices):
            for j in range(i, len(prices)):
                max_price = max(prices[j] - price, max_price)

        return max_price
=> 가장 먼저 접근할 풀이법은 당연히 브루트 포스다. 처음부터 O(n^2)으로 사고팔고를 반복하면, 마지막에 최대 이익을 산출할 수 있을 것 같아.
하지만 안타깝게도 이 풀이는 타임아웃으로 풀리지 않는다.

풀이2) 저점과 현재 값과의 차이 계산
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        profit = 0
        min_price = sys.maxsize

        # 최소값과 최대값 계속 갱신
        for price in prices:
            min_price = min(min_price, price)
            profit = max(profit, price - min_price)

        return profit
=> 입력값을 그래프로 그려서 시각화해보면 대략 어떤 식으로 풀어야 할지 직관이 생길 것이다.
최댓값의 초기값은 -sys.maxsize, 최솟값의 초기값은 sys.maxsize로 지정한다. 만약 None으로 잡아두게 되면 비교 시 타입에러가 발생할 수 있기 떄문이다.
그러나 이 문제에서는 입력값이 []인 경우, 자칫 -sys.maxsize가 그대로 리턴될 수 있기 때문에 profit을 0으로 설정한다.
이후 최저점을 비교해 더 작을 경우 최솟값을 갱신하고, 현재 값과 최솟값과의 차이를 계산해 만약 더 클 경우 최댓값 profit을 게속 갱신하면서 반복한다.

** 최댓값과 최솟값
앞서 문제 풀이에는 다음과 같이 sys를 활용했다. 이 모듈을 사용하면 시스템이 지정할 수 있는 가장 높은 값, 낮은 값을 활용할 수 있다.
    mx = -sys.maxsize
    mn = sys.maxsize
float()을 이용해 다음과 같이 무한대 값을 지정하는 방법도 있다.
가장 좋지 않은 방법은 임의의 값을 지정하는 것이다.
파이썬의 숫자형은 임의 정밀도(Arbitrary-Precision)를 지우너하며 사실상 무한대의 값을 지정할 수 있다.
아무리 큰 수라 할지라도 얼마든지 더 큰 수가 지정될 수 있으므로, 이런 식으로 최솟값 변수에 임의의 값을 초깃값으로 지정하는 것은 지양해야 한다.


Q. 194p 왜 굳이 range문에서 0-1로 표기했을까






5장 함수
## 힘수
# 익명함수, 익명함수를 더 많이 씀.
const f = function() {}

# 선언적 함수
function f () {}

# API
=> Application Programming Interface
애플리케이션 프로그램을 만들 때의 약속

# 나머지 매개변수(가변 매개변수)
function(...매개변수) {}
=> 나머지 매개변수는 매개변수 중 맨 마지막에 위치해야 하며 자료형이 배열(매개변수들이 배열로 들어옴).

# 전개 연산자
함수(...배열)
=> 배열 앞에다 ...을 써서 함수를 호출할 수 있게 해주는 특별한 문법. 배열을 전개해서 실행할 수 있게 해줌.

## 구 버전 자바스크립트
# 구 버전 가변 매개 변수
배열 내부에서 사용할 수 있는 특수한 변수인 arguments를 활용. arguments는 매개변수와 관련된 여러 정보를 확인할 수 있고 배열과 비슷하게 사용 가능.

# 구 버전 전개연산자 구현하기
전개 연산자는 최신 버전의 자바스크립트에 추가된 기능. 구 버전의 자바스크립트에서는 apply() 함수를 사용한 굉장히 특이한 채턴의 코드를 사용함.

# 구 버전 기본 매개변수 구현하기
짧은 조건문을 사용하여 기본 매개변수 구현 가능.


## 클래스의 고급 기능
자원의 부족으로 인해 성능을 무조건적으로 중시했던 과거와 달리, 현재는 가독성이 중요.
점점 저렴해지는 컴퓨터 가격과 점점 비싸지는 개발자의 몸값, 최대한 저렴한 개발자를 고용해도 코드를 읽고 이해하는데 문제 없게 해야 함.
프로그램의 규모가 커지고 복잡해짐. 현대에는 성능보다는 가독성과 안전성을 중시.
ex) 매개변수의 기본값 설정 가능 => 안전성 증가

## 콜백 함수
자바스크립트는 함수도 하나의 자료형이므로 매개변수로 전달 가능. 이렇게 매개변수로 전달하는 함수를 콜백함수라고 함.

## 콜백 함수를 활용하는 함수
# forEach()
배열이 갖고 있는 함수(메소드)로써 단순하게 배열 내부의 요소를 사용해서 콜백 함수를 호출. for 반복문과 달리, break 사용 불가.
ex)
배열.forEach(function (value, index) {
    console.log(`${index}번째의 값은 ${value}`)
}

# map
배열이 갖고 있는 함수(메소드)로써 콜백 함수에서 리턴한 값들을 기반으로 새로운 배열을 만드는 함수.
ex)
배열.map( function (value, index, array) {
    return value * value
})

# filter
배열이 갖고 있는 함수(메소드)로써 콜백 함수에서 리턴하는 값이 true인 것들만 모아서 새로운 배열을 만드는 함수.
배열.filter( function(value, index, array) {
    return value % 2 === 0
}

## 화살표 함수
화살표 함수는 function 키워드 대신 화살표(=>)를 사용. function 키워드를 사용하여 생성하는 함수와 미묘한 차이를 가짐. (6장에서 배울 예정)
(매개변수) => { }
만약 함수 내의 문장이 리턴문 뿐이라면 다음과 같이 return 키워드 생략 가능.
(매개변수) => 리턴값

# forEach, map, filter 함수를 연속적으로 사용 가능.
이렇게 어떤 메소드가 리턴하는 값을 기반으로 해서 함수를 줄줄이 사용하는 것은 '메소드 체이닝'이라고 부름
ex)
numbers
    .filter((value) => value % 2 === 0)
    .map((value) => value * value)
    .forEach((value) => {
        console.log(value)
    })

## 타이머 함수
const a = setTimeout( handler, 밀리초(1000=1초) )    //특정한 시간 후에 한 번 => 고급 단계에서 특별한 사용법을 가짐
const b = setInterval( handler, 밀리초(1000=1초) )   //특정한 시간마다 호출

일반적으로 현대에는 콜백 함수는 함수의 마지막 매개 변수에 오는 것이 일반적, 그러나 setTimeout과 setInterval은 오래 전에 만들어졌기 때문에
콜백 함수가 앞에 온다.

## 타이머 제거 함수
clearTimeout(a)
clearInterval(b)

## 즉시 호출 함수
함수를 만들고 즉시 호출하는 함수 IIFE(Immediately Invoked Function Expression)라고 부르기도 함.
(function () {
})()
또는
(() => {
})()
와 같이 사용함.
중복으로 인한 충돌을 피하기 위해 사용됨. 즉시 호출 함수 내부에서 선언되는 상수와 변수 함수 내부에서만 작동하기 때문에 충돌이 발생하지 않음.
현대 자바스크립트에서는 이렇게 사용할 필요가 없지만 레거시 코드를 이해하기 위해서 필요.

즉시 호출 함수를 사용하지 않더라도 충돌 문제를 해결하기 위해 중괄호{}를 사용해서 생성한 블록과 함수 블록을 사용 가능.
블록 내부에서 블록 외부의 변수와 같은 이름의 변수를 선언하더라도 충돌하지 않고 외부 변수를 가림. 내부 블록에서는 선언한 변수만 볼 수 있음.
이렇게 블록이 다른 경우, 내부 변수가 외부 변수를 가리는 현상을 섀도잉이라고 부름.
단, 구 버전 자바스크립트의 var 키워드는 함수 블록을 사용하는 경우에만 변수 충돌을 막을 수 있음. (테스트 결과, 외부에서 var b = 400; 선언 후 블록 내부에서 { var b = 500;} 선언할 경우, 외부 변수 b의 값이 500으로 변경됨.)
지금도 구 버전의 자바스크립트를 지원하는 웹 브라우저(인터넷 익스플로러)에 대응해야 하는 경우가 많고, Babel 등 최신 버전의 자바스크립트를 구 버전의 자바스크립트로 변경해주는 트랜스 파일러도 단순한 블록으로 함수 충돌을 막는 코드는 제대로 변환해주지 못함.
그래서 많은 개발자들이 함수 블록을 사용해 이런 문제를 해결. 결론, 충돌 문제를 해결하기 위해 사용하는 것이면 즉시 호출 함수가 유용!

## 엄격 모드
블록의 가장 위쪽에 'use strict'를 선언하여 사용.
자바스크립트 언어는 무척이 유연한 언어이기 때문에 문법이 맞지 않아도 잘 돌아가는 경우가 많음.
이런 경우, 내부적으로 큰 위험성을 내포하고 있으므로 이를 방지하기 위해 엄격하게 검사를 해주는 엄격 모드가 등장. 자바스크립트는 'use strict' 문자열을 읽어들인 순간부터 코드를 엄격하게 검사함.
그러나 전체 공동으로 작성하는 소스코드에 대해 엄격 모드를 설정하면 이에 따른 문제 발생 가능 => 즉시 호출 함수 내부에서 맨 윗줄에 엄격 모드를 선언해서 사용. 즉시 호출 함수 내부에서만 엄격 모드가 동작.

## 선언적 함수와 익명 함수의 차이
자바스크립트는 네임스페이스라는 문법이 따로 없어서 이름 충돌이 쉽게 발생할 수 있는 언어. 그래서 이후에 활용하는 객체로 네임스페이스를 유사적으로 만들어 활용. 따라서 선언적 함수를 잘 안씀.
익명 함수의 경우, 그냥 변수 생성과 같기 때문에 코드가 위에서 아래로 읽어지면서 차례대로 함수가 생성됨.
반면에, 선언적 함수는 전체 코드를 읽기 전에 선언한 순서대로 만들어짐. => 함수를 선언하기 전에 함수를 먼저 호출해도 문제없이 실행됨.
이에 따라, 익명 함수와 선언적 함수를 동시에 실행할 때 문제가 발생할 수 있음.

ex)
함수()
함수 = function() { console.log('익명 함수입니다.') }
function 함수() { console.log('선언적 함수입니다.') }
함수()
=> 실행 결과, '선언적 함수입니다' 출력 후, '익명 함수입니다.' 출력.
(선언적 함수가 미리 만들어지므로 첫번째에서는 선언적 함수가 호출이되고 아래쪽 호출에서는 익명 함수가 함수라는 변수를 뒤집어 쓰기 때문에 익명 함수가 호출됨.)
결론, 선언적 함수는 전체 코드를 실행하기 전에 만들어지고 익명 함수는 코드를 하나하나 실행하면서 만들어진다. 따라서, 선언적 함수를 사용할 경우 자바스크립트 코드의 실행 흐름을 예측하기 힘들어짐.
안전상 익명함수로 통일해서 사용하는 것이 좋음.



6장 객체
## 객체
객체는 배열과 마찬가지로 여러가지 자료를 한꺼번에 다루게 해주는 특별한 자료형.
원래 배열이 객체의 일종. (typeof([])를 하면 object가 나옴)

객체의 형태는 다음과 같음. 키에는 식별자를 사용함.(식별자의 조건: 1.숫자로 시작하지 않는다. 2.기호는 $와 _만 포함한다.)
const object = {
    키: 값,
    키: 값,
    키: 값,
    ...
}
"객체['키']" 또는 "객체.키" 통해 속성에 접근 가능

익명 함수: this 바인딩을 함.
화살표 함수: this 바인딩을 안 함.
** this 바인딩: this를 현재 객체와 연결하는 행위.

자바스크립트에서는 this.을 붙이지 않으면 객체 내부에 있는 속성이라고 생각 안함. this.을 꼭 붙여줘야 함.

# 객체 생성
처음 만들 때 같이 만드는 것 => 정적으로 생성
나중에 만드는 것 => 동적으로 생성

# 객체의 키와 값을 정적으로 생성
ex)
const pet = {
    name: '구름'
}

# 객체의 키와 값을 동적으로 생성
ex)
pet.color = 'brown'

# 객체의 키와 값을 동적으로 제거
delete 객체.속성
delete 객체['속성']
ex)
delete pet.color

** 앞서 배열에서 설명했듯이 객체 또한 힙에 생성되므로 const로 선언했더라도 값 추가 가능.
다만, 아예 다른 값을 대입하는 것은 불가. ex) pet = {} (X) , pet = '' (X)

# 기본 자료형 -> 스택에 값을 저장 -> 속성과 메서드를 가질 수 없음.
- 숫자
- 문자열
- 불

# 객체 자료형 -> 스택과 힙을 연결 -> 크기를 늘릴 수 있기 때문에 속성과 메서드를 가짐
- 함수
- 배열
- 객체
- 등등

typeof(함수) => 'function', 함수는 일급 객체(first-class object). 함수를 객체처럼 쓰는 언어는 "함수를 일급 객체(first-class object)로 다룬다"라고 표현.

# 기본 자료형을 객체 자료형으로 선언하기
const a = new Number(10)
const b = new String('문자열')
const c = new Boolean(true)
이렇게 만든 숫자, 불, 문자열은 기본 자료형 숫자, 불, 문자열과 똑같이 사칙연산과 비교 연산자 등을 사용할 수 있음.
typeof()로 확인 시, object 타입으로 나옴. 단순한 기본 자료형이 아니므로 이전과 다르게 속성을 가짐. 만약 new 키워드를 사용하지 않으면 자료형 변환 기능으로 사용됨.

Q. 궁금증! 이론적으로 기본 자료형은 속성과 메서드를 추가할 수 없는데 .length와 같은 속성과 메서드는 어떻게 사용할 수 있는 걸까?
A. 이론적으로는 기본 자료형은 속성과 메서드를 추가할 수 없고 기본 자료형이 속성과 메서드를 쓸 수 있는 이유는 "일시적으로 기본 자료형을 객체로 승급시키기 때문" 이다.
따라서, 기본 자료형의 경우 속성과 메소드를 사용할 수는 있지만 속성과 메소드를 추가로 가질 수는 없음.

# 프로토타입으로 메소드 추가하기
어떤 객체의 prototype이라는 속성이 바로 객체 전용 틀이라고 할 수 있음. prototype 객체에 속성과 메소드를 추가하면 모든 객체와 기본 자료형에서 해당 속성과 메소드를 사용할 수 있음.
ex)
Number.prototype.sample = 10    //sample 속성 추가

String prototype.contain = function (data) {    //contain 메소드 추가
    return this.indexOf(data) >= 0
}

## 기본 자료형과 연결된 객체의 주요 메소드
# Number 객체
변수.toFixed(n) : 소수점 아래 n번째 자릿수까지 반올림하여 출력
Number.isNaN(n) : NaN(Not a Number)인지 확인. ** NaN과 비교하면 모든 값이 false로 나오므로 isNaN() 메소드를 사용해서 NaN인지 확인해야 함.
Number.isFinite(n) : Infinity(무한)인지 확인

# String 객체
변수.trim() : 문자열 양쪽 끝의 공백 없애기
변수.indexOf(찾는 문자열) : 문자열과 일치하는 첫 번째 인덱스를 반환. 매개변수를 생략하면 "undefined"를 찾음. 찾는 문자열이 없다면 -1 반환.
변수.split(구분자) : 구분자로 구분된 문자열을 반환

# Math 객체
수학 상수 Math.PI, Math.E
Math.random() : 0 이상 1 미만의 랜덤한 숫자를 생성. 0 <= 결과 < 1의 범위만 생성.
Math.floor(n) : 내림을 통해 정수로 만들어 주는 함수
Math.ceil(n) : 올림을 통해 정수로 만들어 주는 함수
Math.round(n) : 반올림을 통해 정수로 만들어 주는 함수
Math.max(n1,n2,n3 ...) : 최대 정수를 구하는 함수
Math.min(n1,n2,n3 ...) : 최소 정수를 구하는 함수
Math.max(...[n1,n2,n3...]) : 배열을 매개변수 값으로 전달 할 경우, 전개 연산자를 사용해야 함.

# 외부 script 파일 읽어 들이기
<script src = "외부 파일 경로.js"></script>
HTML 파일은 위에서 아래로 태그를 읽어들이면서 차근차근 적절한 처리를 함.

## 다양한 외부 라이브러리
# Lodash 라이브러리
# Luxon, date-fns: 날짜와 시간을 다루는 라이브러리
# Handsontable: 웹 페이지에 스프레드시트를 출력하는 라이브러리
# D3.js, ChartJS: 그래프를 그릴 수 있는 라이브러리
# Three.js: 3차원 그래픽을 다루는 라이브러리

** CDN(Contents Delivery Network, 콘텐츠 전송 네트워크): 전 세계 여러 지역에 전송할 데이터를 창고처럼 준비해두고 사용자가 데이터를 요청했을 때 가장 가까운 지역에서 데이터를 전송해준다면 훨씬 빠르게 데이터를 전송할 수 있음.
** min 버전의 자바스크립트 파일은 자바스크립트 코드를 집핑(zipping)한 파일을 의미함.
CDN과 min 버전의 파일을 사용하면 script 태그의 src 속성에 그냥 링크를 입력해도 해당 파일을 매우 빠르게 다운로드 받아서 사용 가능.


## 객체와 배열 고급
# 객체 기본값을 지정하는 내용
# 과거(1) undefined가 아니면 object.status 값을 넣고 ,맞으면 '이상 없음'을 넣어라
object.status = object.status !== undefined ? object.status : '이상 없음'

** 과거(2),(3)의 경우, dog.status에 빈문자열 or 0과 같이 false로 변환되는 값이 오지 않을 것이라는 것이 확실해야 함!
그렇지 않으면 값을 넣었는데도 기본 값이 들어감.
# 과거(2)
object.status = object.status ? object.status : '이상 없음'
# 과거(3)
object.status = object.status || '이상없음'

# 현대(1) 첫번째 방법은 전개연산자 ...을 사용하는 방법
** 전개연산자를 뒤에 둬야 함! 왜? 순서대로 속성 값에 덮어씌워지기 때문! 예를 들어, 기존 object에 status 속성의 기본값이 있다면 object = {status: '이상 없음', ...object } 실행 시, status가 생성되고 object의 status로 값이 다시 덮어 씌워지면서 기존 object의 status 기본값을 지킬 수 있음.
** 반대로 object = { ...object, status: '이상 없음' }으로 실행하면 기존 object 객체 안의 status 값의 유무와 관계없이 무조건 status 속성 값이 '이상 없음'이 덮어씌워지.
object = {status: '이상 없음', ...object }

# 현대(2) 이게 가장 현대적인 코드
fun = function ({name, age, color, status = '이상 없음'}){
    return `${name} : ${age} : ${color} : ${status}`
}

## 다중 할당
# 배열 기반의 다중 할당
[식별자, 식별자, 식별자, ... ] = 배열
ex)
let [a,b] = [1,2]

# 객체 기반의 다중 할당
{ 속성 이름, 속성 이름 } = 객체
{ 식별자 = 속성 이름, 식별자 = 속성 이름 } = 객체
const { name, price } = object
const { a = name, b = price } = object

## 배열 전개 연산자
얕은 복사(=참조 복사): 복사했을 때 다른 이름이 붙음. 배열을 복사한 뒤, 하나의 배열에만 특정 값을 추가해도 두 배열의 값이 동일하게 출력됨.
'배열1 = 배열2' 를 통해 얕은 복사 가능.

깊은 복사(=클론을 만드는 것): 복사한 두 배열이 완전히 독립적으로 작동함.
전개 연산자 ...을 이용하여 '배열1 = [...배열2]' 를 통해 깊은 복사 가능.

전개 연산자를 사용하여 손쉽게 자료 추가 가능.
[...배열, 자료, 자료, 자료]

## 객체 전개 연산자
마찬가지로 객체도 깊은 복사를 할 때 전개 연산자 사용 가능. 전개 연산자를 사용해서 깊은 복사를 하면 두 객체가 독립적으로 동작하는 것을 볼 수 있음. '객체1 = 객체2'를 실행하면 얕은 복사가 됨.
{...객체}

객체 역시 전개 연산자를 사용하여 손쉽게 자료 추가 가능.
{...객체, 자료, 자료, 자료}



7장
## 문서 객체 조작하기
문서 객체: HTML 요소
문서 객체 모델 (Document Object Model, DOM), HTML 요소들을 조작하는 객체들의 집합.

DOMContentLoaded 이벤트: 문서 객체를 조작할 때 사용하는 이벤트. 웹 브라우저가 문서 객체를 모두 읽고 나서 실행하는 이벤트. DOMContentLoaded 상태가 되었을 때 콜백 함수를 호출. HTML5부터 추가된 이벤트.
ex)
document.addEventListener('DOMContentLoaded', () => {
    document.body.innerHTML += h1('DOMContentLoaded 이벤트 발생')
})

구 버전의 웹 브라우저를 대상으로 만들어진 코드. (DOMContentLoaded 이벤트가 등장하기 이전의 코드)
document.onload = function(){  }
document.addEventListener(;load;, function () {  })

## 문서 객체 가져오기
# 기본 요소 가져오기
document.head
document.body
document.title
이처럼 html의 요소를 읽어들일 수 있음.

# 기본 요소 이외의 요소 가져오기
head 요소 또는 body 요소 내부에 만든 다른 요소들은 별도의 메소드를 사용해서 접근 가능.
document.querySelector( css 선택자 )   //요소 하나만 추출
document.querySelectorAll( css 선택자 )    //요소 여러 개 추. 문서 객체 여러 개를 배열로 읽어들이기 때문에 forEach()와 같은 메소드를 사용하여 내부의 요소에 접근하해서 활용 가능.

# css 선택자
- 태그 선택자
형태: 태그          설명: 특정 태그를 가진 요소를 추출

- 아이디 선택자
형태: #아이디        설명: 특정 id 속성을 가진 요소를 추출

- 클래스 선택자
형태: .클래스        설명: 특정 class 속성을 가진 요소를 추출

- 속성 선택자
형태: [속성=값]      설명: 특정 속성 값을 갖고 있는 요소를 추출

- 후손 선택자
형태: 선택자_A 선택자_B     설명: 선택자_A 아래에 있는 선택자_B를 선택

ex)
document.addEventListener('DOMmContentLoaded', () => {
    //태그 선택자
    const h1 = document.querySelector('h1')
    h1.style.color = 'red'

    //아이디 선택자, id 선택자가 지정되어 있어야 함. '#'을 활용함.
    document.querySelector('#header').style.backgroundColor = 'orange'

    //클래스 선택자, class 선택자가 지정되어 있어야 함. '.'읋 활용하고 여러개의 클래스 선택자를 지정할 경우, '.center.head'와 같이 띄어쓰기 없이 '.'으로 구분해서 사용! (띄워쓰기를 하면 전혀 다른 의미가 됨)
    document.querySelector('.center.head').style.textAlign = 'center'

    //속성 선택자, 다양한 표기법이 있지만 대표적인 표기법만 알아봄.
    document.querySelector('[type=text]').style.borderRadius = '10px'

    //후손 선택자, body 아래의 모든 input 태그를 잡음. input 태그가 여러개 있어도 가장 처음 선택되는 녀석 하나만 추출을 해서 조작이 적용됨(querySelector 메소드의 특징).
    document.querySelector('body input').style.backgroundColor = 'blue'

})

ex)
for (const element of document.querySelectorAll('input')){
    element.style.backgroundColor = 'red'
}

# 글자 조작하기
문서 객체.textContent   //입력된 문자열을 그대로 넣음. innerHTML보다 textContent의 성능이 더 좋고 더 최신 문법.
문서 객체.innerHTML     //입력된 문자열을 HTML 형식으로 넣음. 보안적으로 문제가 될 수 있기 때문에 많이 사용하지 않음.

# 속성 조작하기
문서 객체.setAttribute(속성 이름, 값)    //특정 속성에 값을 지정.
문서 객체.getAttribute(속성 이름)       //특정 속성을 추출. 표준 속성의 경우 '문서 객체.속성' 형태로도 간단히 특정 속성을 추출 가능. 그러나 표준 속성이 아닐 경우(사용자 정의 속성 ex. alt) getAttribute를 사용해야 함.

# 스타일 조작하기
문서 객체의 스타일을 조작할 때는 style 속성을 사용. style 속성은 객체이며 내부에는 속성으로 CSS를 사용해서 지정할 수 있는 다양한 스타일들이 있음.
자바스크립트에서는 style 속성의 이름들이 css와 달리 캐멀 케이스로 나타냄 (font-size => fontSize)
다음과 같은 3가지 방법으로 스타일 조정이 가능하며, 일반적으로 첫번째 방법을 가장 많이 사용.
h1.style.backgroundColor
h1.style['backgroundColor']
h1.style['background-color']

# 문서 객체 생성하기
document.createElement(문서 객체 이름)    //요소 생성
부모객체.appendChild(자식 객체)             //부모 요소 아래에 자식 요소 추가! 요소 붙이기
ex)
    const header = document,createElement('h1')
    document.body.appendChild(header)

# 문서 객체 제거하기
부모 객체.removeChild(자식 객체)
자식객체.parentNode.removeChild(자식 객체)      //이게 더 많이 사용됨.

# 이벤트 설정하기
모든 문서 객체는 생성되거나 클릭되거나 마우스를 위에 올리거나 할 때 이벤트라는 것이 발생.
문서 객체.addEventListener(이벤트 이름, 콜백 함수)   //이벤트가 발생할 때 매개변수로 지정한 콜백 함수를 실행. 이벤트가 발생할 때 실행할 함수를 이벤트 리스너 또는 이벤트 핸들러라고 부름.
ex)
document.addEventListener('DOMContentLoaded', () => {
    const h1 = document.querySelector('h1')
    h1.addEventListener('click', (event) => {   })
})

# 아벤트 제거하기
문서 객체.removeEventListener(이벤트 이름, 이벤트 리스너)

## 이벤트 활용
아밴트를 연결하는 방법을 이벤트 모델이라고 부름.

# 현재 표준 이벤트 모델
addEventListener()

# 고전 이벤트 모델
문서 객체가 갖고 있는 on~으로 시작하는 속성에 함수를 할당해서 이벤트 연결

# 인라인 이벤트 모델
고전 이벤트 모델처럼 on~으로 시작하는 속성을 HTML 요소에 직접 넣어서 이벤트를 연결하는 것.

모든 이벤트 모델의 이벤트 리스너는 첫 번째 매개변수로 이벤트 객체를 받음. 이벤트 객체에는 이벤트와 관련된 정보가 들어 있음.
고전 이벤트 모델은 이벤트 리스너 하나만 연결할 수 있다는 단점이 있음. 그래서 표준 이벤트 모델이 등장해서 이벤트 리스너를 여러 개 연결할 수 있게 되었고 표준 이벤트 모델을 많이 사용하게 됨.
하지만 최근 프론트엔드 프레임워크들이 인라인 이벤트 모델을 활용하는 형태로 코드를 작성.

# 키보드 이벤트
- keydown: 키가 눌릴 때 실행됨. 키보드를 꾹 누르고 있을 때도, 입력될 때도 실행됨.
- keypress: 키가 입력되었을 때 실행됨. 하지만 웹브라우저에 따라서 아시아권의 문자(한국어, 중국어, 일본어)를 제대로 처리하지 못하는 문제가 있음. 아시아권의 문자는 공백(띄워쓰기, 줄바꿈 등)이 들어가기 전까지는 글자 수를 세지 않음.
- keyup: 키보드에서 키가 떨어질 때 실행됨. 키가 키보드에서 떨어질 때 발생하므로 특정 키를 꾹 누르고 있으면 글자 수를 세지 않음.
** keydown -> keypress -> 입력양식에 값이 들어감! -> keyup 순서로 동작! 따라서, 입력양식 내부의 값을 사용할 경우에는 keyup을 사용해야 값이 입력 값이 들어온 이후에 활용 가능.

# 키보드 키 코드 사용하기
키보드 이벤트가 발생할 때는 이벤트 객체로 어떤 키를 눌렀는지와 관련된 속성들이 따라옴.
- code: 입력한 키를 나타내는 문자열. 인터넷 익스플로러와 구 버전의 엣지 웹 브라우저는 code 속성을 지원하지 않음. 이런 웹 브라우저까지 지원하려면 code가 존재하는지 확인하는 삼항연산자를 이용해서 code가 없다면 keyCode로 대체되도록 구현해야 함.
- keyCode: 입력한 키를 나타내는 숫자
- altKey: alt 키를 눌렀는지 (Bool)
- ctrlKey: ctrl 키를 눌렀는지 (Bool)
- shiftKey: shift 키를 눌렀는지 (Bool)

** 아시아권의 문자는 키보드 이벤트(keydown, keypress, keyup 이벤트)로 원하는 것을 제대로 구현할 수 없는 경우가 많음.
=> 실제 트위터에서는 타이머를 사용해서 50밀리초마다 입력 양식 내부의 글자를 확인해서 글자 수를 셈!
focus(입력 양식에 초점을 맞춘 활성화 상태)와 blur(초점을 해제한 비활성화 상태) 이벤트를 활용함. 입력 양식에 글자를 입력하려고 선택한 순간부터 타이머를 돌리고, 다른 일을 하기 위해서 입력 양식에서 초점을 해제하면 타이머를 정지하게 만듦.
이렇게 구현할 경우, 어떤 상황에서도 어떤 언어를 입력하더라도 글자 수를 정상적으로 출력함.

## 이벤트 발생 객체
코드가 커지면 이벤트 리스너를 외부로 분리하는 경우가 많아짐. 이러한 경웨 이벤트를 발생시킨 객체에 어떻게 접근할 수 있을까?
1. event.currentTarget 속성을 사용. 이는 화살표 함수와 익명 함수 형태 모두 사용 가능.
2. this 키워드를 사용. 화살표 함수가 아닌 익명 함수 형태로 함수를 선언한 경웨 사용 가능.
ex)
textarea.addEventListener('keyup, () => {
    h1.textContent = `글자 수: ${textarea.value.length)`
})
textarea.addEventListener('keyup, (event) => {
    h1.textContent = `글자 수: ${event.currentType.value.length)`
})
textarea.addEventListener('keyup, function (event) {
    h1.textContent = `글자 수: ${this.value.length)`
})

# 기본 이벤트 막기
어떤 이벤트가 발생했을 떄 웹 브라우저가 기본적으로 처리해주는 것을 기본 이벤트라고 부름. ex) 컨텍스트 메뉴
이러한 기본 이벤트를 제거하기 위해 event 객체의 preventDefault() 메소드를 사용.
ex)
img.addEventListener('contextmenu', (event) => {
    event.preventDefault()
})

## 입력
1. 버튼
case 1) 클릭 이벤트 기반으로 동작
<button>글자</button>
case 2) 클릭 이벤트 기반으로 동작
<input type="button" value="글자">

ex) 클릭 이벤트 기반으로 동작하는 버튼 예시
document.addEventListener('DOMContentLoaded', () => {
    const buttonA = document.querySelector('button')
    const buttonB = document.querySelector('input[type=button]')
    buttonA.addEventListener('click', (event) => {
        event.currentTarget.textContent += '글자'
    })
    buttonB.addEventListener('click', (event) => {
        event.currentTarget.value += '글자'
    })
})

case 3) submit 이벤트 기반으로 동작
<form action="">
    <input type="submit" value="글자">
</form>
** <form> 태그 안에 <button> 태그가 있으면 submit 태그와 동일하게 동작하므로 주의해야 함.
 <form> 태그 아래에 click 이벤트를 기반으로 동작하는 버튼을 만들고 싶으면 <input type="button"> 과 같이 타입을 버튼으로 지정해서 사용해야 함.

2. 글자 입력
** change 이벤트: 입력 양식 전체에 값 입력을 마쳤을 때! 값 입력을 마쳤다는 것을 선언을 할 때(ex. 엔터 입력)
** keydown -> keypress -> 입력 양식에 값이 들어감! -> keyup
case 1) 한 줄 입력 가능. 내부의 값을 가져올 때는 value 속성 사용. 자주 사용되는 이벤트는 change 아밴트, keydown keyup, keyress 등의 이벤트와 함께 사용.
<input type="text" name="" id="">

case 2) 여러줄로서 글자 입력 가능. 내부의 값을 가져올 때는 value 속성 사용. 자주 사용되는 이벤트는 change 아밴트, keydown keyup, keyress 등의 이벤트와 함께 사용.
<textarea name="" id="" cols="30" rows="10"></textarea>

case 3) 글를 직접적으로 수정 가능
<p contenteditable="true">글자</p>

3. 선택박스(드롭다운)
<select>
    <option>떡볶이</option>
    <option>순대</option>
</select>

옵션 목록 가져오기: event.currentTarget.options
선택한 옵션 가져오기: event.currentTarget.options.selectedIndex

4. 체크박스: 어떤 대상의 true 또는 false를 선택할 때 사용. change 이벤트와 checked 속성 사용.
<input type="checkbox" name="" id="">

체크 상태 확인: event.currentTarget.checked

5. 라디오 버튼: 여러 대상 중에서 하나를 선택할 때 사용. 따라서 여러개의 선택지를 위해 여러개의 input 태그를 지정해야 함. 이때, 하나의 그룹을 나타내기 위해서는 name을 동일하게 설정하면 됨.
<input type="radio" name="" id="">


## localStorage 객체
지역적으로 사용할 수 있는 저장소 객체. 웹 브라우저가 기본적으로 제공하는 객체
localStorage.getItem('키')   //저장된 값을 추출. 없으면 undefined가 나옴.
localStorage.setItem('키', '값')  //값을 저장.
localStorage.removeItem('키')    //특정 키의 값을 제거.
localStorage.clear()            //저장된 모든 값을 제거.

## JSON(JavaScript Object Notation): 자바스크립트에서 객체를 표현하는 형식으로 데이터를 저장하는 형식.
1. 키는 문자열만 가능!
2. 문자열은 반드시 큰따옴표로 감싸야 함!

# JSON 객체
JSON.stringfy(): 자바스크립트 객체 -> JSON 문자열
JSON.parse(): JSON 문자열 -> 자바스크립트 객체


8장 예외 처리
## 구문 오류와 예외
- 프로그램 실행 '전'에 발생하는 오류: 구문 오류(SyntaxError)
- 프로그램 실행 '중'에 발생하는 오류: 런타임 오류(RuntimeError) or 예외(exception)

조건문 등을 사용한 예외처리 => 기본 예외 처리
try ~ catch ~ finally => 고급 예외 처리

자바스크립트는 다른 프로그래밍 언어와 비교해서 굉장히 유연하기 때문에 예외를 발생할 가능성이 적은 편.
이와 같은 유연함 때문에 예외를 발생하지 않는다고 좋은 것은 아니다. => 프로그램에 문제가 발생했는데도 죽지 않고 실행되면 계속해서 문제를 만들 가능성이 있음.

try{
    //예외가 발생할 가능성이 있는 코드
} catch (error) {
    //예외가 발생했을 때 실행할 코드
} finally {
    //무조건적으로 실행되는 코드(finally 구문은 필수 사항이 안며 예외 발생 여부와 상관없이 수행해야 하는 작업이 있을 때 사용)
}

Q. finally 구문을 왜 사용해야 할까?
A. try catch 구문 내부에서 return 키워드를 만날 때 또는 break나 continue 키워드를 만날 때 finally 구문을 무조건 실행해줌! 안전한 코드를 작성하기 위해서 필요!

# 강제 예외 발생
throw 문자열               //단순하게 예외를 발생시킴.
throw new Error(문자열)    //조금 더 자세하게 예외를 발생시킴.

예외를 강제로 발생시키면 사용자에게 주의를 줄 수 있으며, 의도한 대로 처리하게 유도할 수 있음.



과거의 패러다임: 짧고 빠른 코드를 작성하자!
현재의 패러다임: 쉽게 읽을 수 있는 코드를 작성하자!





























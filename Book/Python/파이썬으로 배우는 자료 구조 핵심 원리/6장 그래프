6장 그래프: 관련 있는 데이터 연결하기

그래프는 최단 경로를 계산랑 때 등등 매우 폭넓게 사용된다.


* 그래프 용어 정리
그래프는 정점(vertex)의 집합 V(G)와 에지(edge)의 집합 E(G)로 정의된다. G = (V,E)로 표기한다.

- 무방향 그래프
방향이 없는 무방향 그래프. 방향이 없는 에지는 {(0,1),(0,2),(0,3),(2,3)}와 같이 표기한다.

- 방향 그래프
정점 사이에 화살표 에지가 있다. 에지의 화살표가 있는 쪽은 head가 되고 반대쪽은 tail이 된다.
방향이 있는 에지는 {<0,1>,<0,2>,<1,2>,<2,3>,<3,2>}와 같이 표기한다.

- 자기 간선
일반적으로 그래프는 자기 간선(self-edge)을 가지지 못한다.
자기 간선은 정점 0이 tail이자 동시에 head 이다.

- 멀티그래프
그래프에서는 일반적으로 에지 중복을 인정하지 않는다.
이 중복 에지를 인정하는 자료 구조를 멀티그래프라고 한다.

- 인접
정점 u와 정점 v 사이에 에지(u,v)가 있을 때 u와 v는 서로 인접한다(adjacent)라고 표현한다.

- 경로
경로(path)란 원소와 원소 사이의 정점 순서를 의미한다. 이때 경로 길이는 에지 개수이다.
경로 중에서 단순 경로(simple path)는 어떤 경로에서 처음과 마지막을 제외하고 모든 정점이 다를 때를 의미한다.
그래프에서 경로라고 하면 일반적으로 단순 경로를 의미한다.
사이클(cycle)이란 단순 경로에서 처음과 마지막 정점이 같은 것이다.

- 연결된 스래프(connected graph)
어떤 임의의 정점 u와 다른 어떤 임의의 정점 v를 골랐을 때 정점 사이에 있는 경로가 있으면 이를 연결되었다(connected)고 한다.
즉, 연결된 그래프란 임의의 두 정점을 골랐을 때 모든 경우에 연결된 그래프이다.

- 차수
무방향 그래프의 경우 어떤 정점 v의 차수 d(v)는 정점 v가 부속된 에지 개수이다.
여기서 부속되었다(incident)는 표현은 정점 u와 정점 v 사이에 에지(u,v)가 존재할 때 에지(u,v)를 정점 u에 부속되었다, 정점 v에 부속되었다고 표현한다.
진입 차수(in-degree)는 정점 v가 head인 경우이다. 다시 말해 정점 v로 들어오는 에지 개수이다. in-d(v)라고 표기한다.
진출 차수(out-degree)는 정점 v가 tail인 경우이다. 즉, 정점 v에서 나가는 에지 개수이다. out-d(v)라고 표기한다.
방향 그래프에서 차수는 진입 차수와 진출 차수의 합이다. d(v)라고 표기한다.

- 부분 그래프와 신장 부분 그래프
부분 그래프는 그래프 G'가 G에 대해 V(G')는 (G)에 포함되고 E(G')는 E(G)에 포함되면 그래프 G'는 그래프 G의 부분 그래프이다.
그래프 G'가 그래프 G에 대해 V'=V고 E(G')가 E(G)에 포함되면 이 그래프를 신장 부분 그래프라고 한다.



* 그래프를 표현하는 두 가지 방법: 도시와 도시를 이어 보자
그래프를 표현하는 두 가지 방법, "인접 리스트(adjacency list)"와 "인접 행렬(adjacency matrix)"

1. 인접 리스트
배열 한 개와 연결 리스트들로 구성되어 있다. 정점이 배열의 인덱스가 된다.
배열 요소인 연결 리스트는 해당 정점의 인접한 정점의 집합이다.

2. 인접 행렬
각각의 행을 정점으로 보고 열을 자신을 포함한 다른 정점이라고 생각하면 n행 m열은 정점 n과 정점 m 사이의 관계를 나타낸다.



<파이썬으로 그래프의 ADT 작성해보기>
1. G.is_empty() -> Boolean
: 비어 있으면 TRUE, 아니면 FALSE 반환

2. G.add_vertex() -> Integer
: 정점을 추가하고 정점 인덱스를 반환

3. G.delete_vertex(v)
: 정점 v를 삭제

4. G.add_edge(u,v)
: 에지 (u,v)를 추가

5. G.delete_edge(u,v)
: 에지 (u,v)를 삭제

6. G.adj(v) -> array
: 정점 v에 인접한 정점 집합을 동적 배열로 반환

=> 구현은 연결 리스트 대신에 동적 배열을 사용한다.




코드 6-1. 그래프
class Graph:
    def __init__(self, vertec_num=None):
    # 인접 리스트
    self.adj_list = []
    self.vtx_num = 0
    # 정점이 있으면 True
    # 정점이 없다면 False
    self.vtx_arr = []
    # 정점 개수를 매개변수로 넘기면
    # 초기화를 진행합니다.
    if vertex_num:
        self.vtx_num vertex_num
        # vtx_arr은 정점의 존재 여부를 저장하기 위함. 정점을 삭제할 때마다 뒤에 있는 모든 정점을 한 칸씩 당기는 대신 그 정점 인덱스를 비활성화한다.
        self.vtx_arr = [True for _ in range(self.vtx_num)]
        # 배열 요소를 연결 리스트 대신 동적 배열을 사용합니다.
        self.adj_list = [[] for _ in range(self.vtx_num)]



코드 6-2. is_empty() 메서드와 add_vertex() 메서드
    def is_empty(self):
        if self.vtx_num == 0:
            return True
        return False

    def add_vertex(self):
        for i in range(len(self.vtx_arr)):
            # 중간에 삭제된 정점이 있을 경우
            # 이를 재사용합니다.
            # vtx_arr 값이 False면
            # 삭제된 정점이라는 의미입니다.
            if self.vtx_arr[i] == False:
                self.vtx_num += 1
                self.vtx_arr[i] = True
                return i
            # 삭제된 정점이 없다면 정점을 하나 추가합니다.
            self.adj_list.append([])
            self.vtx_num += 1
            self.vtx_arr.append(True)
            return self.vtx_num - 1



코드 6-3. delete vertex() 메서
    def delete_vertex(self, v):
        if v >= self.vtx_num:
            raise Exception(f"There is no vertex of {v}")
        # 정점 v가 있으면
        if self.vtx_arr[v]:
            # 정점 v의 인접 정점 집합을 초기화합니다.
            self.adj_list[v] = []
            self.vtx_num -= 1
            self.vtx_arr[v] = False
            # 나머지 정점 중 v와 인접한 정점이 있다면
            # 그 정점의 리스트에서 v를 제거해 줍니다.
            for adj in self.adj_list:
                for vertex in adg:
                    if vertex == v:
                        adj.remove(vertex)



코드 6-4. add_edge() 메서드와 delete_edge() 메서드
    def add_edge(self, u, v):
        self.adj_list[u].append(v)
        self.adj_list[v].append(u)

    def delete_edge(self, u, v):
        self.adj_list[u].remove(v)
        self.adj_list[v].remove(u)



코드 6-5. adj() 메서드
    def adj(self, v):
        return self.adj_list[v]




** 그래프의 모든 노드 방문: 모든 도시를 여행해 보자
그래프는 선형 자료 구조가 아니기 때문에 모든 노드를 한 번만 방문하는 순회(traversal)를 구현하기가 쉽지 않습니다.
그래프의 모든 노드를 순회하는 방법은 "너비 우선 탐색(Breadth First Search, BFS)"와 "깊이 우선 탐색(Depth First Search, DFS)" 두가지가 있다.
너비 우선 탐색은 큐를 이용해서 구현하고, 깊이 우선 탐색은 스택을 기반으로 한다.


* 너비 우선 탐색: 인근 도시부터 여행하기
너비 우선 탐색은 큐를 사용한다.

코드 6-6.
class Graph:
    def __init__(self, vertex_num):
        # 인접 리스트로 구현
        self.adj_list = [[] for _ in range(vertex_num)]
        # 방문 여부 체크
        self.visited = [False for _ in range(vertex_num)]

    def add_edge(self, u, v):
        self.adj_list[u].append(v)
        self.adj_list[v].append(u)

    def init_visited(self):
        for i in range(len(self.visited)):
            self.visited[i] = False



코드 6-7.
    def bfs(self, v):
        q = Queue()
        # 방문 체크 리스트를 초기화합니다.
        self.init_visited()

        # 첫 번째 정점을 큐에 넣고
        # 방문 체크
        q.put(v)
        self.visited[v] = True

        while not q.empty():
            v = q.get()
            # 방문
            print(v, end=" ")
            # 인접 리스트를 얻어 옵니다.
            adj_v = self.adj_list[v]
            for u in adj_v:
                if not self.visited[u]:
                    q.put(u)
                    self.visited[u] = True



* 깊이 우선 탐색: 한 방향으로 쭉 따라 여행하기
깊이 우선 탐색(DFS)은 스택을 사용한다.
재귀 함수를 호출하는 것은 스택 프레임을 요소로 스택에 쌓는 것과 같다.

코드 6-8. 재귀 함수로 구현한 깊이 우선 탐색
    def __dfs_recursion(self, v):
        # 방문
        print(v, end=" ")
        # 방문 체크
        self.visited[v] = True

        adj_v = self.adj_list[v]
        for u in adj_v:
            if not self.visited[u]:
                self.__dfs_recursion(u)

    def dfs(self, v):
        self.init_visited()
        self.__dfs_recursion(v)



코드 6-9. 스택 자료 구조와 반복문으로 구현한 깊이 우선 탐색
    def iter_dfs(self, v):
        """
        시작 정점으로 돌아가
        더 이상 방문할 정점이 없어야 종료
        """
        s = Stack()
        self.init_visited()

        s.push(v)
        # 방문 체크 및 방문
        self.visited[v] = True
        print(v, end=" ")

        # 아직 방문하지 않은 정점을 방문했는가
        is_visited = False

        while not s.empty():
            is_visited = False
            v = s.peek()
            # 인접 리스트를 받아 옵니다.
            adj_v = self.adj_list[v]
            for u in adj_v:
                if not self.visited[u]:
                    s.push[u]
                    # 방문 체크 및 방문
                    self.visited[u] = True
                    print(u, end = " ")
                    # 아직 방문하지 않은 정점을 방문했으므로
                    is_visited = True
                    break

        if not is_visited:
            s.pop()




코드 6-10. 연결되어 있지 않은 그래프를 모두 순회
    def dfs_all(self):
        self.init_visited()

        for i in range(len(self.visited)):
            if not self.visited[i]:
                self.__dfs_recursion(i)